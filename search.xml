<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[DOM操作成本到底高在哪儿？]]></title>
    <url>%2F2018%2F03%2FDOM%E6%93%8D%E4%BD%9C%E6%88%90%E6%9C%AC%E5%88%B0%E5%BA%95%E9%AB%98%E5%9C%A8%E5%93%AA%E5%84%BF%2F</url>
    <content type="text"><![CDATA[从我接触前端到现在，一直听到的一句话：操作DOM的成本很高，不要轻易去操作DOM。尤其是React、vue等MV*框架的出现，数据驱动视图的模式越发深入人心，jQuery时代提供的强大便利地操作DOM的API在前端工程里用的越来越少。刨根问底，这里说的成本，到底高在哪儿呢？ 什么是DOM Document Object Model 文档对象模型 什么是DOM？可能很多人第一反应就是div、p、span等html标签（至少我是），但要知道，DOM是Model，是Object Model，对象模型，是为HTML（and XML）提供的API。HTML(Hyper Text Markup Language)是一种标记语言，HTML在DOM的模型标准中被视为对象，DOM只提供编程接口，却无法实际操作HTML里面的内容。但在浏览器端，前端们可以用脚本语言（JavaScript）通过DOM去操作HTML内容。 那么问题来了，只有JavaScript才能调用DOM这个API吗？ 答案是NO。 Python也可以访问DOM。所以DOM不是提供给Javascript的API，也不是Javascript里的API。 PS: 实质上还存在CSSOM：CSS Object Model，浏览器将CSS代码解析成树形的数据结构，与DOM是两个独立的数据结构。 浏览器渲染过程 讨论DOM操作成本，肯定要先了解该成本的来源，那么就离不开浏览器渲染。 这里暂只讨论浏览器拿到HTML之后开始解析、渲染。（怎么拿到HTML资源的可能后续另开篇总结吧，什么握握握手啊挥挥挥挥手啊，万恶的flag…） 解析HTML，构建DOM树（这里遇到外链，此时会发起请求） 解析CSS，生成CSS规则树 合并DOM树和CSS规则，生成render树 布局render树（Layout/reflow），负责各元素尺寸、位置的计算 绘制render树（paint），绘制页面像素信息 浏览器会将各层的信息发送给GPU，GPU将各层合成（composite），显示在屏幕上 1.构建DOM树1234567891011&lt;html&gt; &lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt; &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;title&gt;Critical Path&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello &lt;span&gt;web performance&lt;/span&gt; students!&lt;/p&gt; &lt;div&gt;&lt;img src=&quot;awesome-photo.jpg&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 无论是DOM还是CSSOM，都是要经过Bytes → characters → tokens → nodes → object model这个过程。 DOM树构建过程：当前节点的所有子节点都构建好后才会去构建当前节点的下一个兄弟节点。 2.构建CSSOM树上述也提到了CSSOM的构建过程，也是树的结构，在最终计算各个节点的样式时，浏览器都会先从该节点的普遍属性（比如body里设置的全局样式）开始，再去应用该节点的具体属性。还有要注意的是，每个浏览器都有自己默认的样式表，因此很多时候这棵CSSOM树只是对这张默认样式表的部分替换。 3.生成render树 DOM树和CSSOM树合并生成render树 简单描述这个过程： DOM树从根节点开始遍历可见节点，这里之所以强调了“可见”，是因为如果遇到设置了类似display: none;的不可见节点，在render过程中是会被跳过的（但visibility: hidden; opacity: 0这种仍旧占据空间的节点不会被跳过render），保存各个节点的样式信息及其余节点的从属关系。 4.Layout 布局有了各个节点的样式信息和属性，但不知道各个节点的确切位置和大小，所以要通过布局将样式信息和属性转换为实际可视窗口的相对大小和位置。 5.Paint 绘制万事俱备，最后只要将确定好位置大小的各节点，通过GPU渲染到屏幕的实际像素。 Tips 在上述渲染过程中，前3点可能要多次执行，比如js脚本去操作dom、更改css样式时，浏览器又要重新构建DOM、CSSOM树，重新render，重新layout、paint； Layout在Paint之前，因此每次Layout重新布局（reflow 回流）后都要重新出发Paint渲染，这时又要去消耗GPU； Paint不一定会触发Layout，比如改个颜色改个背景；（repaint 重绘） 图片下载完也会重新出发Layout和Paint； 何时触发reflow和repaint reflow(回流): 根据Render Tree布局(几何属性)，意味着元素的内容、结构、位置或尺寸发生了变化，需要重新计算样式和渲染树；repaint(重绘): 意味着元素发生的改变只影响了节点的一些样式（背景色，边框颜色，文字颜色等），只需要应用新样式绘制这个元素就可以了；reflow回流的成本开销要高于repaint重绘，一个节点的回流往往回导致子节点以及同级节点的回流； GoogleChromeLabs 里面有一个csstriggers，列出了各个CSS属性对浏览器执行Layout、Paint、Composite的影响。 引起reflow回流 现代浏览器会对回流做优化，它会等到足够数量的变化发生，再做一次批处理回流。 页面第一次渲染（初始化） DOM树变化（如：增删节点） Render树变化（如：padding改变） 浏览器窗口resize 获取元素的某些属性： 浏览器为了获得正确的值也会提前触发回流，这样就使得浏览器的优化失效了，这些属性包括offsetLeft、offsetTop、offsetWidth、offsetHeight、 scrollTop/Left/Width/Height、clientTop/Left/Width/Height、调用了getComputedStyle()或者IE的currentStyle 引起repaint重绘 reflow回流必定引起repaint重绘，重绘可以单独触发 背景色、颜色、字体改变（注意：字体大小发生变化时，会触发回流） 优化reflow、repaint触发次数 避免逐个修改节点样式，尽量一次性修改 使用DocumentFragment将需要多次修改的DOM元素缓存，最后一次性append到真实DOM中渲染 可以将需要多次修改的DOM元素设置display: none，操作完再显示。（因为隐藏元素不在render树内，因此修改隐藏元素不会触发回流重绘） 避免多次读取某些属性（见上） 将复杂的节点元素脱离文档流，降低回流成本 为什么一再强调将css放在头部，将js文件放在尾部DOMContentLoaded 和 load DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片… load 事件触发时，页面上所有的DOM，样式表，脚本，图片都已加载完成 CSS 资源阻塞渲染构建Render树需要DOM和CSSOM，所以HTML和CSS都会阻塞渲染。所以需要让CSS尽早加载（如：放在头部），以缩短首次渲染的时间。 JS 资源 阻塞浏览器的解析，也就是说发现一个外链脚本时，需等待脚本下载完成并执行后才会继续解析HTML 这和之前文章提到的浏览器线程有关，浏览器中js引擎线程和渲染线程是互斥的，详见《从setTimeout-setInterval看JS线程》 普通的脚本会阻塞浏览器解析，加上defer或async属性，脚本就变成异步，可等到解析完毕再执行 async异步执行，异步下载完毕后就会执行，不确保执行顺序，一定在onload前，但不确定在DOMContentLoaded事件的前后 defer延迟执行，相对于放在body最后（理论上在DOMContentLoaded事件前） 举个栗子1234567891011&lt;html&gt; &lt;head&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt; &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello &lt;span&gt;web performance&lt;/span&gt; students!&lt;/p&gt; &lt;div&gt;&lt;img src=&quot;awesome-photo.jpg&quot;&gt;&lt;/div&gt; &lt;script src=&quot;app.js&quot;&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 浏览器拿到HTML后，从上到下顺序解析文档 此时遇到css、js外链，则同时发起请求 开始构建DOM树 这里要特别注意，由于有CSS资源，CSSOM还未构建前，会阻塞js（如果有的话） 无论JavaScript是内联还是外链，只要浏览器遇到 script 标记，唤醒JavaScript解析器，就会进行暂停 blocked 浏览器解析HTML，并等到 CSSOM 构建完毕，才执行js脚本 渲染首屏（DOMContentLoaded 触发，其实不一定是首屏，可能在js脚本执行前DOM树和CSSOM已经构建完render树，已经paint） 首屏优化Tips 说了这么多，其实可以总结几点浏览器首屏渲染优化的方向 减少资源请求数量（内联亦或是延迟动态加载） 使CSS样式表尽早加载，减少@import的使用，因为需要解析完样式表中所有import的资源才会算CSS资源下载完 异步js：阻塞解析器的 JavaScript 会强制浏览器等待 CSSOM 并暂停 DOM 的构建，导致首次渲染的时间延迟 so on… 知道操作DOM成本多高了吗? 其实写了这么多，感觉偏题了，大量的资料参考的是chrome开发者文档。感觉js脚本资源那块还是有点乱，包括和DOMContentLoaded的关系，希望大家能多多指点，多多批评，谢谢大佬们。 操作DOM具体的成本，说到底是造成浏览器回流reflow和重绘reflow，从而消耗GPU资源。 参考文献:https://developers.google.com/web/fundamentals/performance/critical-rendering-path/ 已同步至个人博客-软硬皆施Github 欢迎star :)]]></content>
      <tags>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS中各种布局的背后(*FC)]]></title>
    <url>%2F2018%2F02%2FCSS%E4%B8%AD%E5%90%84%E7%A7%8D%E5%B8%83%E5%B1%80%E7%9A%84%E8%83%8C%E5%90%8E(*FC)%2F</url>
    <content type="text"><![CDATA[CSS中各种布局的背后，实质上是各种*FC的组合。CSS2.1 中只有 BFC 和 IFC, CSS3 中还增加了 FFC 和 GFC。 盒模型(Box Model).png) 上图为W3C标准盒模型，另外还有一种IE盒模型（IE6以下），唯一的区别就是：前者width = content，后者width = content + padding + border 若要将IE盒模型转换为标准盒模型，需要在文档顶部加上&lt;!DOCTYPE html&gt;声明；很有意思的是，后来CSS3 中也增加了box-sizing属性，box-sizing: content-box即标准盒模型，box-sizing: border-box即IE盒模型（width包含内边距和边框），W3C反过来又承认了微软，也是有意思。 视觉格式化模型(Visual Formatting Model) 视觉格式化模型(visual formatting model)是用来处理文档并将它显示在视觉媒体上的机制，根据上述的盒模型，为文档元素生成盒（Box）。通俗的说，视觉格式化模型就是文档里的盒子布局呈现的一种规则。 影响布局的因素 盒的尺寸和类型 定位方案 Positioning Scheme （常规流，浮动和绝对定位） 文档树中元素之间的关系 外部信息（如：视口大小，图片的固有尺寸等） FC – Formatting Context FC…是谁在说脏话？！ Formatting Context – 格式化上下文，*FC就是视觉格式化模型，用来描述盒子布局规则。 前方大波概念来袭！ 块级元素、块级盒、块容器盒、块盒、匿名块盒、行内级元素、行内级盒、原子行内级盒、原子行内盒、行盒、匿名行内盒、插入盒……要报警了！！！这些真的不是我YY出来的，W3C 里真的有这么多概念好吗！！！感觉进坑了啊！！！headache…来吧，一个个捋清楚… -_-||| 块级元素(Block-level elements)：当元素的 CSS 属性 display:block / list-item / table 时，它就是是块级元素 block-level ，视觉上呈现为块，竖直排列。每个块级元素生成一个主要的块级盒 (Principal Block-level Box) 来包含其后代盒和生成的内容，同时参与定位体系 (Positioning Scheme) 。某些块级元素还会在主要盒之外产生额外的盒： list-item 元素。这些额外的盒会相对于主要盒来摆放。 块级盒(Block-level boxes)：由块级元素生成，参与块级格式化上下文(BFC)。描述元素跟它的父元素与兄弟元素之间的表现。 块容器盒(Block container box)：只包含其它块级盒，或生成一个行内格式化上下文(inline formatting context)，只包含行内盒。有些块级盒，比如表格，不是块容器盒。相反，一些块容器盒，比如非替换行内块及非替换表格单元格，不是块级盒。描述元素跟它的后代之间的影响。 块盒(Block boxes)：同时是块容器盒的块级盒。 匿名块盒(Anonymous block boxes)：没有名字，不能被 CSS 选择符选中。块容器盒要么只包含行内级盒，要么只包含块级盒，但通常文档会同时包含两者，在这种情况下，将创建匿名块盒来包含毗邻的行内级盒。 12345&lt;div&gt; I am Block container box &lt;p&gt;I'm Inline-level boxes&lt;/p&gt; I am Block container box&lt;/div&gt; 行内级元素(Inline-level elements)：当元素的 CSS 属性 display：inline, inline-block 或 inline-table 时，称它为行内级元素。行内级元素生成行内级盒(inline-level boxes)，参与行内格式化上下文(IFC)。 行内级盒(Inline-level boxes)：所有 display:inline 的非替换元素生成的盒是行内盒。 原子行内级盒(atomic inline-level boxes)：不参与生成行内格式化上下文的行内级盒称为原子行内级盒(atomic inline-level boxes)。 原子行内盒(atomic inline boxes)：注意：起初原子行内级盒(atomic inline-level boxes)被称为原子行内盒(atomic inline boxes)。很不幸，它们并非行内盒。规范的勘误表修正了这个错误。不管怎样，当再看到原子行内盒时可以放心的当成原子行内级盒，因为只是改了名字。原子行内盒在行内格式化上下文里不能分成多行。 行盒(Line boxes)：行盒由行内格式化上下文(IFC)产生的盒，用于表示一行。在块盒里面，行盒从块盒一边排版到另一边。 当有浮动时, 行盒从左浮动的最右边排版到右浮动的最左边。 匿名行内盒(Anonymous inline boxes)：匿名行内盒最常见的例子是块盒直接包含文本。 插入盒(Run-in boxes)：插入盒(Run-in boxes)从 CSS 2.1 标准中移除了，因为可操作的实现定义不足。 可能 CSS3 会引入，但是这是实验性质，不能用于生产环境。 定位方案(Positioning schemes)- 常规流(Normal flow) CSS2.1中，常规流包括块级盒的块格式化，行内盒的行内格式化，以及块级盒和行内级盒的相对定位。 - 浮动(Floats) 在浮动模型中，盒首先根据常规流布局，然后从常规流中脱离并尽可能地向左或向右位移。内容可以布局在浮动周围。 - 绝对定位(Absolute positioning) 在绝对定位模型中，盒完全从常规流中脱离（对后面的同胞元素无影响）并根据包含块来分配位置。 BFC – Block Formatting Context触发条件 根元素或其它包含它的元素 浮动 float: left/right/inherit 绝对定位元素 position: absolute/fixed 行内块 display: inline-block 表格单元格 display: table-cell 表格标题 display: table-caption 溢出元素 overflow: hidden/scroll/auto/inherit 弹性盒子 display: flex/inline-flex 布局规则 内部的Box会在垂直方向，一个接一个地放置。 Box垂直方向的距离由margin决定。属于同一个BFC的两个相邻Box的margin会发生重叠。 每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。 BFC的区域不会与float box重叠。 BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。 计算BFC的高度时，浮动元素也参与计算 应用场景 闭合浮动：浮动区域不叠加到BFC区域上 防止与浮动元素重叠 防止margin collapse float 元素高度塌陷 … IFC – Inline Formatting Contexts触发条件一个块级元素中仅包含内联级别元素 布局规则 内部的盒子会在水平方向，一个接一个地放置。 这些盒子垂直方向的起点从包含块盒子的顶部开始。 摆放这些盒子的时候，它们在水平方向上的 padding、border、margin 所占用的空间都会被考虑在内。 在垂直方向上，这些框可能会以不同形式来对齐（vertical-align）：它们可能会使用底部或顶部对齐，也可能通过其内部的文本基线（baseline）对齐。 能把在一行上的框都完全包含进去的一个矩形区域，被称为该行的行框（line box）。行框的宽度是由包含块（containing box）和存在的浮动来决定。 IFC中的 line box 一般左右边都贴紧其包含块，但是会因为float元素的存在发生变化。float 元素会位于IFC与与 line box 之间，使得 line box 宽度缩短。 IFC 中的 line box 高度由 CSS 行高计算规则来确定，同个 IFC 下的多个 line box 高度可能会不同（比如一行包含了较高的图片，而另一行只有文本） 当 inline-level boxes 的总宽度少于包含它们的 line box 时，其水平渲染规则由 text-align 属性来确定，如果取值为 justify，那么浏览器会对 inline-boxes（注意不是inline-table 和 inline-block boxes）中的文字和空格做出拉伸。 当一个 inline box 超过 line box 的宽度时，它会被分割成多个boxes，这些 boxes 被分布在多个 line box 里。如果一个 inline box 不能被分割（比如只包含单个字符，或 word-breaking 机制被禁用，或该行内框受 white-space 属性值为 nowrap 或 pre 的影响），那么这个 inline box 将溢出这个 line box。 应用场景 水平居中：当一个块要在环境中水平居中时，设置其为 inline-block 则会在外层产生 IFC，通过设置父容器 text-align:center 则可以使其水平居中。 垂直居中：创建一个IFC，用其中一个元素撑开父元素的高度，然后设置其 vertical-align:middle，其他行内元素则可以在此父元素下垂直居中。 FFC – Flex Formatting Contexts触发条件当 display 的值为 flex 或 inline-flex 时，将生成弹性容器（Flex Containers）, 一个弹性容器为其内容建立了一个新的弹性格式化上下文环境（FFC） 布局规则 设置为 flex 的容器被渲染为一个块级元素 设置为 inline-flex 的容器则渲染为一个行内元素 弹性容器中的每一个子元素都是一个弹性项目。弹性项目可以是任意数量的。弹性容器外和弹性项目内的一切元素都不受影响。简单地说，Flexbox 定义了弹性容器内弹性项目该如何布局 GFC – GridLayout Formatting Contexts触发条件当为一个元素设置display值为grid的时候，此元素将会获得一个独立的渲染区域 布局规则通过在网格容器（grid container）上定义网格定义行（grid definition rows）和网格定义列（grid definition columns）属性各在网格项目（grid item）上定义网格行（grid row）和网格列（grid columns）为每一个网格项目（grid item）定义位置和空间 参考： Visual formatting model 视觉格式化模型 BFC 神奇背后的原理]]></content>
      <tags>
        <tag>BFC</tag>
        <tag>IFC</tag>
        <tag>FFC</tag>
        <tag>GFC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Travis CI助力Blog持续输出]]></title>
    <url>%2F2018%2F01%2FTravis%20CI%E5%8A%A9%E5%8A%9BBlog%E6%8C%81%E7%BB%AD%E8%BE%93%E5%87%BA%2F</url>
    <content type="text"><![CDATA[之前更新blog要这样：本地安装hexo环境，还需要敲几个命令：hexo clean &amp;&amp; hexo g &amp;&amp; hexo d，构建部署还有点浪费时间。其实每次更新blog的时候，只需要增删改几个Markdown文件。懒~干脆上CI吧。 CI 为何物 CI（Continuous Integration）—— 持续集成。 其实光从名字其实能大致知道CI做了什么事情。硬件领域有集成模块、集成电路，软件领域也有集成概念：项目构建、自动化测试、部署等等。我的理解，每个成熟的产品从零散到成型到出品（上线）的过程，就是集成（Integration）。那么CI做的事情，就是让这个工程自动化，持续进行（Continuous）。 好处： 快速发现错误 保持分支与主干相对集中 “持续集成并不能消除Bug，而是让它们非常容易发现和改正。” – Martin Fowler 流程： 其实应该将这几个概念揉在一起：持续集成、持续部署、持续交付、持续发布。 1.代码提交：commit2.测试（第一轮）：hook相应的commit动作，自动化测试3.构建：build，相当于是编译可用的代码4.测试（第二轮）：包含单元测试和集成测试5.部署：打包至生产环境6.回滚：若最新版本发生异常，则回滚到上一版本 Travis CI 又为何物 Travis CI: 在线托管的CI服务，最重要的事情，它对开源项目是免费的！！！（重要的感叹号加三个！！！） Travis CI 官网上醒目的大字：Test and Deploy with ConfidenceEasily sync your GitHub projects with Travis CI and you’ll be testing your code in minutes! 赤裸裸的表白，果然和Github是一对好基友。 这意味着，我们在Github的 Public Repository都可以利用Travis CI 进行免费的持续集成，当然，Personal Repository也可以用它，不过挺贵的。之前用Github Pages 搭的Blog刚好可以用Travis CI来持续构建，将偷懒进行到底吧！ 只需几步，快速体验CI1.GitHub账号直接登录打开Travis CI ,使用 GitHub 第三方授权登录，不要问为什么，好丽友，好基友。 2.打开Repo CI配置 勾上你的blog repo (这里我勾上了palmerye.github.io)，点击小齿轮，进入配置页。 打开最上方两个开关，其它默认就行了：Build only if .travis.yml is presentBuild pushed branches 其实官方也有教程，只要三步： 3.添加 .travis.yml 划重点了! 1.新建一个source分支，将原来本地的Hexo工程，gitignore外的那些目录，切到source分支。（最终我们只需要推这个分支到origin） 123456789// .gitignore.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/ 2.为Travis CI 新建Token 这一步很关键，为什么Travis有权限帮你推GitHub？所以你要给它钥匙，就是Token。 在GitHub个人账户 Setting/ Developer settings/ Personal access tokens下，新建一个Token，然后在Travis CI配置中，Environment Variables，添加生成的Token。 3.source分支下新建.travis.yml 1234567891011121314151617181920212223242526272829303132333435363738language: node_jsnode_js: stablecache: directories: - node_modules# S: Build Lifecycleinstall: - npm install#before_script: # - npm install -g gulpscript: - hexo clean &amp;&amp; hexo gafter_script: - git clone https://$&#123;GH_REF&#125; .deploy_git - cd .deploy_git - git checkout master - cd ../ - mv .deploy_git/.git/ ./public/ - cd ./public - git init - git config user.name "palmerye" - git config user.email "palmerye@gmail.com" - git add . - git commit -m ":memo:\ Update docs by CI" - git push --force --quiet "https://$&#123;CI_TOKEN&#125;@$&#123;GH_REF&#125;" master:master // CI_TOKEN为上一步在github上生成的Token。# E: Build LifeCyclebranches: only: - sourceenv: global: - GH_REF: github.com/palmerye/palmerye.github.io.git 其实看这个配置文件就大致能知道这个流程，在Travis 服务器上install相应的依赖，然后执行hexo clean &amp;&amp; hexo g等一系列之前需要在本地跑的命令，最后将生成的静态资源blog（在./public目录下），推到master分支。 4.将source分支推到远端，Travis 监听到有动作就会跑上面我们配置的脚本。 可以愉快写Blog了现在，我们可以把本地那些hexo臃肿的依赖删了（这意味着，你在任意的电脑上都能快速更新blog了，不需要安装hexo依赖），每次只需要增删改/source/_posts/下的markdown文件就可以了，轻轻push一下，其他交给Travis CI吧，你可以在Travis / Current看到实时的构建状态，包括构建时间和成功与否。 最后，为了提高Blog的档bi次ge，在readme加个build passing 标签吧。 最后的最后其实前面只是最简单粗暴的用了Travis CI，它还有很多强大的功能，比如一些 Cron Jobs，都是比较傻瓜式的，有时间继续搞吧。干巴爹💪！继续写blog了。 PS：Blog in Github：https://github.com/palmerye/palmerye.github.io/ 参考：持续集成是什么？– 阮大大使用Travis进行持续集成 – 廖大大]]></content>
      <tags>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Rokid（全栈语音开发套件）评测---优雅篇]]></title>
    <url>%2F2018%2F01%2FRokid%EF%BC%88%E5%85%A8%E6%A0%88%E8%AF%AD%E9%9F%B3%E5%BC%80%E5%8F%91%E5%A5%97%E4%BB%B6%EF%BC%89%E8%AF%84%E6%B5%8B-%E4%BC%98%E9%9B%85%E7%AF%87%2F</url>
    <content type="text"><![CDATA[元旦宅在家chuang里shang，刚好收到了Rokid寄来的开发板，激动的去公司拿回快递，动手拆拆拆。 首先感谢SF和Rokid平台，想想自己申请的时候脸皮真的是厚，现在看评论真的不堪入目。看了几篇其他人的评测，感觉需要从另一个角度来看Rokid这块开发板，那就先从优duo雅tu的角度看吧。 全家桶 从左至右依次为： 开发板外盒 Type-C数据线（供电: 应该是正常1.5A~3A都能带动，还没仔细去看电源模块） Debug板 核心板 如果想正常体验Rokid的功能，其实只需要核心板就可以，USB Type-C供电，结合Rokid App。 拆拆拆 作为一名曾经的硬件工程师，看到螺丝这种东西，都想不自觉地拧一拧 拆下所有螺丝螺母，铜制，Rokid还是良心呀。 很快就将能拆的都拆了，两块圆形透明塑料板子让开发板线路很直观，很极客。但如果需要把debug板子集成进去的话，还需要再加三根铜柱来支撑。 套件细节 从工程角度看这块开发板的做工，无论是焊锡点，还是PCB布线材质，都很漂亮，想起了自己以前手焊电路板的日子，尤其是那种芝麻大的电容，想想还是。。。快忘了很多硬件的工艺知识了，跑工厂的时候，解决现场问题尤其头疼。 核心板 Debug板 躺在盒子是这个样子的。 PCB收尾 一言不合开个机看看USB口接上普通手机电源，我是直接插到笔记本边上了，也能带得动。 刚开机的时候，外圈交替闪烁四盏LED（白）。3.5mm接口插上耳机（开发套件默认不配备扬声器），可以听到开发套件的语音反馈。 这里我就跳过了App网络蓝牙配置阶段了。 配置成功后亮起一圈LED（绿） 对它说“若琪”，在你声音的方向会亮起一盏LED（白） “明天天气如何？”,识别语音，亮起若干LED（白）转圈显示 ”xxxx“耳机可以听到相应的语音反馈，期间整圈LED（白）同时闪烁 最后还没怎么去折腾开发功能，不过目前想解决的问题是，让套件连接蓝牙音箱，代替它的麦克风输出。有时间再玩耍吧。 生命不息，折腾不止。 本文参与了 SegmentFault「Rokid 开发板试用，开启你的嵌入式开发之旅」活动，欢迎正在阅读的你申请试用，一起交流开发心得。]]></content>
      <tags>
        <tag>rokid</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从setTimeout/setInterval看JS线程]]></title>
    <url>%2F2017%2F12%2F%E4%BB%8EsetTimeout-setInterval%E7%9C%8BJS%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最近项目中遇到了一个场景，其实很常见，就是定时获取接口刷新数据。那么问题来了，假设我设置的定时时间为1s，而数据接口返回大于1s，应该用同步阻塞还是异步？我们先整理下js中定时器的相关知识，再来看这个问题。 初识setTimeout 与 setInterval 先来简单认识，后面我们试试用setTimeout 实现 setInterval 的功能 setTimeout 延迟一段时间执行一次 (Only one) 12345setTimeout(function, milliseconds, param1, param2, ...)clearTimeout() // 阻止定时器运行e.g.setTimeout(function()&#123; alert("Hello"); &#125;, 3000); // 3s后弹出 setInterval 每隔一段时间执行一次 (Many times) 1234setInterval(function, milliseconds, param1, param2, ...)e.g.setInterval(function()&#123; alert("Hello"); &#125;, 3000); // 每隔3s弹出 setTimeout和setInterval的延时最小间隔是4ms（W3C在HTML标准中规定）；在JavaScript中没有任何代码是立刻执行的，但一旦进程空闲就尽快执行。这意味着无论是setTimeout还是setInterval，所设置的时间都只是n毫秒被添加到队列中，而不是过n毫秒后立即执行。 进程与线程，傻傻分不清楚为了讲清楚这两个抽象的概念，我们借用阮大大借用的比喻，先来模拟一个场景: 这里有一个大型工厂 工厂里有若干车间，每次只能有一个车间在作业 每个车间里有若干房间，有若干工人在流水线作业 那么： 一个工厂对应的就是计算机的一个CPU，平时讲的多核就代表多个工厂 每个工厂里的车间，就是进程，意味着同一时刻一个CPU只运行一个进程，其余进程在怠工 这个运行的车间（进程）里的工人，就是线程，可以有多个工人（线程）协同完成一个任务 车间（进程）里的房间，代表内存。 再深入点： 车间（进程）里工人可以随意在多个房间（内存）之间走动，意味着一个进程里，多个线程可以共享内存 部分房间（内存）有限，只允许一个工人（线程）使用，此时其他工人（线程）要等待 房间里有工人进去后上锁，其他工人需要等房间（内存）里的工人（线程）开锁出来后，才能才进去，这就是互斥锁（Mutual exclusion，缩写 Mutex） 有些房间只能容纳部分的人，意味着部分内存只能给有限的线程 再再深入: 如果同时有多个车间作业，就是多进程 如果一个车间里有多个工人协同作业，就是多线程 当然不同车间之间的工人也可以有相互协作，就需要协调机制 JavaScript 单线程总所周知，JavaScript 这门语言的核心特征，就是单线程（是指在JS引擎中负责解释和执行JavaScript代码的线程只有一个）。这和 JavaScript 最初设计是作为一门 GUI 编程语言有关，最初用于浏览器端，单一线程控制 GUI 是很普遍的做法。但这里特别要划个重点，虽然JavaScript是单线程，但浏览器是多线程的！！！例如Webkit或是Gecko引擎，可能有javascript引擎线程、界面渲染线程、浏览器事件触发线程、Http请求线程，读写文件的线程(例如在Node.js中)。ps：可能要总结一篇浏览器渲染的文章了。 HTML5提出Web Worker标准，允许JavaScript脚本创建多个线程，但是子线程完全受主线程控制，且不得操作DOM。所以，这个新标准并没有改变JavaScript单线程的本质。 同步与异步，傻傻分不清楚 之前阮大大写了一篇《JavaScript 运行机制详解：再谈Event Loop》，然后被朴灵评注了，特别是同步异步的理解上，两位大牛有很大的歧义。 同步(synchronous)：假如一个函数返回时，调用者就能够得到预期结果(即拿到了预期的返回值或者看到了预期的效果)，这就是同步函数。 123e.g.alert(&apos;马上能看到我拉&apos;);console.log(&apos;也能马上看到我哦&apos;); 异步(asynchronous)：假如一个函数返回时，调用者不能得到预期结果，需要通过一定手段才能获得，这就是异步函数。 1234e.g.setTimeout(function() &#123; // 过一段时间才能执行我哦&#125;, 1000); 异步构成要素 一个异步过程通常是这样的：主线程发起一个异步请求，相应的工作线程（比如浏览器的其他线程）接收请求并告知主线程已收到(异步函数返回)；主线程可以继续执行后面的代码，同时工作线程执行异步任务；工作线程完成工作后，通知主线程；主线程收到通知后，执行一定的动作(调用回调函数)。 发起（注册）函数 – 发起异步过程 回调函数 – 处理结果 123e.g.setTimeout(fn, 1000);// setTimeout就是异步过程的发起函数，fn是回调函数 通信机制 异步过程的通信机制：工作线程将消息放到消息队列，主线程通过事件循环过程去取消息。 消息队列 Message Queue 一个先进先出的队列，存放各类消息。 事件循环 Event Loop 主线程（js线程）只会做一件事，就是从消息队列里面取消息、执行消息，再取消息、再执行。消息队列为空时，就会等待直到消息队列变成非空。只有当前的消息执行结束，才会去取下一个消息。这种机制就叫做事件循环机制Event Loop，取一个消息并执行的过程叫做一次循环。 工作线程是生产者，主线程是消费者。工作线程执行异步任务，执行完成后把对应的回调函数封装成一条消息放到消息队列中；主线程不断地从消息队列中取消息并执行，当消息队列空时主线程阻塞，直到消息队列再次非空。 setTimeout(function, 0) 发生了什么其实到这儿，应该能很好解释setTimeout(function, 0) 这个常用的“奇技淫巧”了。很简单，就是为了将function里的任务异步执行，0不代表立即执行，而是将任务推到消息队列的最后，再由主线程的事件循环去调用它执行。 HTML5 中规定setTimeout 的最小时间不是0ms，而是4ms。 setInterval 缺点 再次强调，定时器指定的时间间隔，表示的是何时将定时器的代码添加到消息队列，而不是何时执行代码。所以真正何时执行代码的时间是不能保证的，取决于何时被主线程的事件循环取到，并执行。 1setInterval(function, N) 那么显而易见，上面这段代码意味着，每隔N秒把function事件推到消息队列中，什么时候执行？母鸡啊！ 上图可见，setInterval每隔100ms往队列中添加一个事件；100ms后，添加T1定时器代码至队列中，主线程中还有任务在执行，所以等待，some event执行结束后执行T1定时器代码；又过了100ms，T2定时器被添加到队列中，主线程还在执行T1代码，所以等待；又过了100ms，理论上又要往队列里推一个定时器代码，但由于此时T2还在队列中，所以T3不会被添加，结果就是此时被跳过；这里我们可以看到，T1定时器执行结束后马上执行了T2代码，所以并没有达到定时器的效果。 综上所述，setInterval有两个缺点： 使用setInterval时，某些间隔会被跳过； 可能多个定时器会连续执行； 链式setTimeout1234setTimeout(function () &#123; // 任务 setTimeout(arguments.callee, interval);&#125;, interval) 警告：在严格模式下，第5版 ECMAScript (ES5) 禁止使用 arguments.callee()。当一个函数必须调用自身的时候, 避免使用 arguments.callee(), 通过要么给函数表达式一个名字,要么使用一个函数声明. 上述函数每次执行的时候都会创建一个新的定时器，第二个setTimeout使用了arguments.callee()获取当前函数的引用，并且为其设置另一个定时器。好处： 在前一个定时器执行完前，不会向队列插入新的定时器（解决缺点一） 保证定时器间隔（解决缺点二） So…回顾最开始的业务场景的问题，用同步阻塞还是异步，答案已经出来了… PS：其实还有macrotask与microtask等知识点没有提到，总结了那么多，其实JavaScript深入下去还有很多，任重而道远呀。 参考: 进程与线程的一个简单解释 – 阮大大 【译】JavaScript 如何工作的: 事件循环和异步编程的崛起 + 5 个关于如何使用 async/await 编写更好的技巧]]></content>
      <tags>
        <tag>event loop</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端真的能做到彻底权限控制吗？]]></title>
    <url>%2F2017%2F09%2F%E5%89%8D%E7%AB%AF%E7%9C%9F%E7%9A%84%E8%83%BD%E5%81%9A%E5%88%B0%E5%BD%BB%E5%BA%95%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E5%90%97%EF%BC%9F%2F</url>
    <content type="text"><![CDATA[有一天突然想到一个问题，web端的权限控制：1.真的能控制权限吗？2.仅仅靠前端，能不能做到真正的权限控制？3.如果需要后台配合，应该如何配合？可能这是一个老生常谈的问题，但还是想整理下，有误的地方望大家指出。 何为权限控制权限控制大致分为两个维度: 垂直维度: 控制用户可以访问哪些url的权限 水平维度: 控制用户访问特定url，获取哪些数据的权限（e.g. 普通用户、管理员、超级管理员访问同一url，获取的数据是不同的） Web权限控制方案List 前后端不分离：以Java为例，后端通过jsp、freemark、thmeleaf等模板来渲染相应权限的数据，渲染完呈现在浏览器端 前后端分离： SPA单页面应用，路由由前端控制，前端通过js控制hash路由的权限 SSR服务端渲染，Node中间层做代理路由，判断权限渲染特定的路由至浏览器端 SPA前端权限控制方案 SPA: 单页Web应用（single page web application）将所有web活动局限于一个html页面中，利用js通过hash或者浏览器history api来实现无刷新路由跳转，前后端通过ajax数据通信，避免了浏览器的刷新重新加载，为用户提供流程的操作体验。这意味着前端接管了路由层，需要通过调用前端自身的MVC模块，来渲染不同的页面。 Base on： Vue 前端MVVM框架 Vuex 状态管理机 Vue-router 路由 Axios HTTP请求库 1.登陆事件Login123456// 1.触发登陆事件dispatch('login') // actionscommit(types.LOGIN_SUCCESS, res.data.data)... 2.获取Token，经Base64编码后存至sessionStorage1234567891011121314151617// mutationsconst mutations = &#123; [types.LOGIN_SUCCESS] (state, data) &#123; state.authlock = false // 2.登陆成功回调拿到token,经Base64 编码后存入本地sessionStorage let token = Base64.encode(data + ':HIKDATAE') sessionStorage.setItem('userToken', token) // 路由跳转至目标页面 router.push(&#123;name: 'xxx'&#125;) &#125;, [types.LOGOUT_SUCCESS] (state) &#123; state.authlock = true // 登出成功回调,移除本地token sessionStorage.removeItem('userToken') router.push(&#123;name: 'Login'&#125;) &#125;&#125; 3.所有HTTP Header Authorization 加上编码后的token(前后端可约定规则)123456789101112// Axios 请求钩子（request）axios.interceptors.request.use(req =&gt; &#123; let token = sessionStorage.getItem('user') if (token) &#123; // 3.token 存在,则在之后所有请求的http请求头 Authorization 带上base64编码后的token,后台拿到token后进行验证权限 req.headers.Authorization = `Basic $&#123;token&#125;` &#125; req.data = qs.stringify(req.data) return req &#125;, error =&gt; &#123; return Promise.reject(error) &#125;) 浏览器http header 4.请求拦截：后台拿到token后对每个请求进行校验，若校验失败返回401，前端response钩子里统一catch error 跳转至登陆页面12345678910111213141516// Axios 请求钩子（response）axios.interceptors.response.use(res =&gt; &#123; return res&#125;, error =&gt; &#123; if (error.response) &#123; switch (error.response.status) &#123; // 4.所有接口response校验钩子,若token检验失败,后台返回 401 error code, 清除token信息并跳转到登录页面 case 401: store.commit(types.LOGOUT) router.replace(&#123; path: '/login' &#125;) &#125; &#125; return Promise.reject(error)&#125;) 5.路由跳转拦截：任意路由跳转时，在路由beforeEach钩子里校验本地是否存在token，若没有，则跳转至登陆页面12345678910111213// 路由钩子(每个路由跳转前调起beforeEach钩子)router.beforeEach((to, from, next) =&gt; &#123; if (to.path === '/login') &#123; sessionStorage.removeItem('userToken') &#125; let user = sessionStorage.getItem('userToken') if (!user &amp;&amp; to.path !== '/login') &#123; // 若本地token不存在,则任意路由跳转的时候,重定向至login 登陆页面 next(&#123; path: '/login' &#125;) &#125; else &#123; next() &#125;&#125;) 6.登出Logout：清楚本地sessionStorage的token信息12345678910// mutationsconst mutations = &#123; ... [types.LOGOUT_SUCCESS] (state) &#123; state.authlock = true // 登出成功回调,移除本地token sessionStorage.removeItem('userToken') router.push(&#123;name: 'Login'&#125;) &#125;&#125; 流程示意图如下: 写完才觉得，什么才是真正的安全权限？任重而道远。。。]]></content>
      <tags>
        <tag>权限</tag>
        <tag>token</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[8㎡出租房100元小折腾记录--90后杭漂程序员]]></title>
    <url>%2F2017%2F09%2F8%E3%8E%A1%E5%87%BA%E7%A7%9F%E6%88%BF100%E5%85%83%E5%B0%8F%E6%8A%98%E8%85%BE%E8%AE%B0%E5%BD%95-90%E5%90%8E%E6%9D%AD%E6%BC%82%E7%A8%8B%E5%BA%8F%E5%91%98%2F</url>
    <content type="text"><![CDATA[都说房子是租的，但生活不是。同步更新至 知乎专栏文章 封面镇楼！ 先允许我发发牢骚吧，最近杭州出租房整改，到处在拆隔断，房租也随之高涨，无奈原来的房间合同到期，只能告别朝南的大落地窗，出来找房子。咸鱼、五八、豆ban、公司论坛，找房子也是折腾的，只能晚上加完班去看房子，要么就是周末，心很累的，资道吗！ 后来好不容易签了一个房间，快到搬进去的前几天，毁约！！！你敢信！！！ 眼看周末现在住的房子要到期，要睡马路的节奏有没有！！！附近24小时营业的便利店我都找好了！！！3天要找到房子你敢信！！！但是！！！后来被我找到了你敢信！！！ 还是要感谢现在的室友老蔡…不然你可能会某一天的夜晚在某个桥下，看到一个敲代码的农民… 房子在xx小区5层，三室一厅原户型，水电民用，有简易的客厅和厨房，小区周边设施比较全，生活还是很便利的，主要离公司近，走路十几分钟。我的房间朝北次卧，先上图吧，这是老蔡（室友）在咸鱼上挂的照片，当时我二话没说，下班看了房子交了几千块，拿了一把沉甸甸的钥匙🔑。这么果断的原因？？？离公司近、原户型、性价比、时间紧迫…够了吧… 以下就用“窝”代替我的房间名称了！！！ 交钱拿到钥匙的第二天晚上，下完班拿了一小部分行李去窝里，顺便带着尺子去量以下尺寸。主要是量这么几个东西： 床（我一米八多，老怕床不够长） 书桌（有点旧，所以打算铺个桌布） 窗户（这个窗帘有点脏啊） 门和墙（下面👇会看到，西面的墙是斜的） 量完回到家，就画了平米图，像模像样有没有。 8㎡的空间，实在有限，所以空间是大头。有大致思路后，画了草图，把床挪了方向，书桌不动，因为刚好嵌入凹槽节省一定的空间，而且西侧的墙可以利用起来挂一些东西（后面会重点提到这面墙）。上草图。 来，重点介绍这面墙！ 西侧和斜侧不是实体墙，应该是防火板之类的，掉灰，贴不了墙纸，只有在局部能钉上钉子，我又怕敲敲打打影响隔壁邻居，那么问题来了，如何做到最少的支撑点同时又能满足大量上墙的需求？ 我的解决方案是：铁丝网。只需要4个角固定住，中间撑开，网格上就能挂大量物件，美观大方！机智如我！ 买买买 其实要买的东西不多，因为也不需要刷墙什么的大动干戈，简单列一下大部分清单，主要考虑出门在外租房流动性较大，投入不宜过高，搬家的时候也舍得扔。 墙纸（必备，提升逼格利器，十米 ￥8.5） 桌布（必备，提升逼格利器，150*90 ￥18） 毛地毯（光脚踩着舒服极了 60*200 ￥9.9） 镜子（买了4面小的拼凑起来一长条 ￥9.9） 铁丝网（买那种2.5cm孔径 热镀锌铁丝 1米*2米 ￥9.99） LED灯带（暖白，简直是点睛之笔，记得买带驱动器的 2米 ￥4.3） 门垫（进门要拖鞋，这才有家的感觉吧） 窗帘（叫麻麻寄过来的，无价） 其余的衣柜啊，床头柜啊，走的咸鱼，也没几个钱 开始干活 先说说窝的基调吧，本来是想走性冷淡风的，就因为那块桌布，后来墙纸也有点立体，有点走工业风了，不过都挺喜欢的，黑色是主调，其余随便揉揉吧。第一步肯定是清洁，特别是把墙纸趴下来的时候掉灰，总体打扫干净后开始挥舞小手干活了。贴墙纸很简单的，挂那个铁丝网真的是费力，因为寄过来的时候是卷的，好不容易把它铺平，上墙的时候调整了很久，最终还是不平整，也罢，反正工业上都没那么讲究的。纯文字描述感觉没什么好说的，直接泼上一些图吧，咱看图说话。 咸鱼入的床头柜，刚好在附近，上门自提了，99新，有点小，不过挺正。 9块9入的镜子，每次换房子都会买，贴在墙上很牢的。 云南买的扎染布画，很正宗的手工扎染，曾被麻麻蹂躏在角落里，现在又被我翻出来了。 咸鱼入的方格拼接衣柜，半透明，还不错（没错，我就是喜欢深色，有意见？！） 挂窗帘，从小就会的技能（多才多艺的我）。 引出的插线板可以粘在书桌盘，这样线不会在桌子上乱飞，旁边那个是垃圾桶，也是黑色。 因为是晚上拍的，照片不太亮，桌子后面是LED灯带，只有几瓦，很省电。是不是桌布点睛！因为书桌是老式的，有很多抽屉，东西都能放进去，所以桌面看起来比较干净。看到这面墙了吧，什么东西都能往上怼，很爽有没有！桌面上左边那个是红酒箱，里面还有一瓶没开，不过风格很搭这个桌布，所以，怼！色调以黑白为主，毕竟我是色弱！ 泼一张熄灯后的图，基本上晚上房间不用开灯，因为都在play computer~ 以上基本上就是小折腾的全部，其他的我就不泼图了。想着坐在这样的桌前，墙上记录一些些生活，桌前水培的植物带来的生命绿，拟人态的木偶，想必也能在下班后能有一个不一样的环境，来告诉自己，生活真的不止是生存…… 这里是杭城的某个角落，驻着一位平凡的程序员，有梦想，晚安。 END]]></content>
      <tags>
        <tag>出租房，杭漂</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[致敬多说，投奔LiveRe]]></title>
    <url>%2F2017%2F06%2F%E8%87%B4%E6%95%AC%E5%A4%9A%E8%AF%B4%EF%BC%8C%E6%8A%95%E5%A5%94LiveRe%2F</url>
    <content type="text"><![CDATA[良心多说 因公司业务调整,非常遗憾的向大家宣布多说项目即将关闭。我们将于2017年6月1日正式关停服务,在此之前您可以通过后台的数据导出功能导出自己站点的评论数据。From 多说官方 国内评论系统，很长一段时间，多说占了大部分市场份额，但无奈被迫关闭，让很多个人站长及部分网站感到失望，更多的，也许是惋惜。多说免费，轻量，好用，虽然经常不稳定但绝对算足够良心。也许是没有找到变现的方式，也许是真的像官方说的，公司业务调整，也许真的有一天，多说会换个姿态回来，不得而知。 只是现在，问题来了，多说的替代方案？ 替代方案 大致折腾了一段时间，整理了下国内及国外主要的第三方评论系统 国内 多说（over） 友言（好像不在维护了） 畅言（需要备案） 网易云跟帖（登录方式有些局限） 国外 DISQUS（评论要翻墙，No） Facebook Comments（不解释） HyperComments（不解释） LiveRe（来必力，韩国友人出的，界面小清新，可能有时候会有点卡，但够用了） 投奔LiveRe(来必力) 今天刚好有空，折腾下博客的评论系统，多说不能用了，虽然文章评论也不多，但之前那篇文章积累了好多评论，现在都没了，有点可惜。 我用的Next主题，这个评论系统已经有人提了PR，官方也支持了（我知道你懒），所以如果你是最新的主题版本，可以直接在主题配置文件里修改：1livere_uid: #your livere_uid 还有几点要说的是， LiveRe网站好像不太稳定，经常无法登陆，不过不需要翻墙，多试几次就好了。 评论是添加的图片不能正常显示 无法导入评论数据（我没找到入口） 评论界面风格是可以选择的，在后台配置可以看到 评论数据分析做得不错，可以重点把玩下 就简单地写这么多吧，最后，致敬多说！]]></content>
      <tags>
        <tag>评论系统</tag>
        <tag>liveRe</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RevealJs(slides演示工具)中文文档]]></title>
    <url>%2F2017%2F05%2FRevealJs-slides%E6%BC%94%E7%A4%BA%E5%B7%A5%E5%85%B7-%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%2F</url>
    <content type="text"><![CDATA[reveal.js 就是在各个互联网大会或者科技发布会常用的幻灯片演示工具，也就是slides，功能强大，自适应移动端和PC端。It translated by Palmer in 2017/5/13. 示例： 左图为移动端，右图为PC端。完整示例：Demo 预览 Demo 预览 工程位于gh-pages分支 工程运行指南 中文文档 官方英文文档 官方文档中文翻译，内容做适当删减 一个使用 HTML 轻松创建精美的演示文稿框架，你只要有一个支持 CSS 3D 切换的浏览器(拥抱Chrome, 拒绝IE)。点击查看 Demo reveal.js 配备了广泛的功能，包括嵌套幻灯片，Markdown 内容，PDF 导出，演讲笔记和 JavaScript API。还有一个全功能的可视化编辑器和平台,可生成在线的slide地址,有免费版和收费版：slides.com。 更多功能 更新日志: 获取最新版本. 例子: 这里有一些基于reveal.js的演示例子,也欢迎PR,提供属于你自己的个性例子! 浏览器支持: 浏览器兼容情况. 插件: 扩展reveal.js功能的插件列表. 在线编辑演示文档是使用 HTML 或者 Markdown 编写的，如果你们更喜欢图形界面的在线编辑器，点击 https://slides.com 尝试一下。 说明结构这里有一个简单的例子,充分展示了reveal.js的演示文档结构.123456789101112131415161718&lt;html&gt; &lt;head&gt; &lt;link rel="stylesheet" href="css/reveal.css"&gt; &lt;link rel="stylesheet" href="css/theme/white.css"&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="reveal"&gt; &lt;div class="slides"&gt; &lt;section&gt;Slide 1&lt;/section&gt; &lt;section&gt;Slide 2&lt;/section&gt; &lt;/div&gt; &lt;/div&gt; &lt;script src="js/reveal.js"&gt;&lt;/script&gt; &lt;script&gt; Reveal.initialize(); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 演示文档的标签结构需要 .reveal &gt; .slides &gt; section 包含，一个 section 表示一个 slide 而且可以无限重复。如果你在一个 section 标签里包含了多个 section，那么这几个 section 就会垂直分布（意思就是你需要上下切换 slide），第一个垂直的 slide 位于其它 slide 的顶部，同时也是包含在水平 slide 序列中。举个例子:123456789&lt;div class="reveal"&gt; &lt;div class="slides"&gt; &lt;section&gt;Single Horizontal Slide&lt;/section&gt; &lt;section&gt; &lt;section&gt;Vertical Slide 1&lt;/section&gt; &lt;section&gt;Vertical Slide 2&lt;/section&gt; &lt;/section&gt; &lt;/div&gt;&lt;/div&gt; _Markdownreveal.js 支持 Markdown 来实现内容。使用 Markdown 实现内容时，需要在 section 标签中添加 data-markdown 属性，然后将 Markdown 内容写到一个 text/template 脚本中，如下例。 这是基于 Paul Irish 为了支持 GitHub Flavored Markdown 而修改的 data-markdown，所以对缩进和换行符都是敏感的，应该避免tabs和空格混用，也要注意换行的使用。 1234567&lt;section data-markdown&gt; &lt;script type="text/template"&gt; ## Page title A paragraph with some text and a [link](http://hakim.se). &lt;/script&gt;&lt;/section&gt; 外部 Markdown 文件可以把 Markdown 内容写在外部文件里，在 reveal.js 运行时进行加载。 引用外部文件时可设置的参数： data-separator 定义划分横向幻灯片的规则（默认值为 ^\r?\n---\r?\n$) data-separator-vertical 定义划分纵向幻灯片的规则（默认禁用） data-separator-notes 定义当前幻灯片的演讲备注 (默认值为 note:) data-charset 定义外部文件加载时使用的字符集 如果要在本地使用该特性，演示文稿需要运行在本地服务器上 123456&lt;section data-markdown="example.md" data-separator="^\n\n\n" data-separator-vertical="^\n\n" data-separator-notes="^Note:" data-charset="iso-8859-15"&gt;&lt;/section&gt; 元素属性在 Markdown 内容中，可以通过 html 注释来添加元素属性，如分段： 123456&lt;section data-markdown&gt; &lt;script type="text/template"&gt; - 列表项 1 &lt;!-- .element: class="fragment" data-fragment-index="2" --&gt; - 列表项 2 &lt;!-- .element: class="fragment" data-fragment-index="1" --&gt; &lt;/script&gt;&lt;/section&gt; 幻灯片属性html 注释也可以用来添加幻灯片 &lt;section&gt; 元素的属性。 123456&lt;section data-markdown&gt; &lt;script type="text/template"&gt; &lt;!-- .slide: data-background="#ff0000" --&gt; Markdown 内容 &lt;/script&gt;&lt;/section&gt; 配置 markedreveal.js 使用 marked 来解析 Markdown，可在设置reveal 配置 时传入 marked 的配置： 1234567Reveal.initialize(&#123; // 传入 marked 的配置 // 参考 https://github.com/chjj/marked#options-1 markdown: &#123; smartypants: true &#125;&#125;); 配置需在页面底部初始化 reveal，所有配置项均为可选，默认值如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899Reveal.initialize(&#123; // 在右下角显示控制面板 controls: true, // 显示演示进度条 progress: true, // 显示幻灯片页码 // 可使用代码 slideNumber: 'c/t'，表示 '当前页/总页数' slideNumber: false, // 幻灯片切换时写入浏览器历史记录 history: false, // 启用键盘快捷键 keyboard: true, // 启用幻灯片概览 overview: true, // 幻灯片垂直居中 center: true, // 在触屏设备上启用触摸滑动切换 touch: true, // 循环演示 loop: false, // 演示方向为右往左，即向左切换为下一张，向右切换为上一张 rtl: false, // 打乱幻灯片顺序 shuffle: false, // 启用幻灯片分段 fragments: true, // 演示文稿是否运行于嵌入模式（如只占页面的一部分） // 译者注：与触屏相关 // false：所有在演示文稿上触发的 "touchmove" 的默认行为都会被阻止 // true：只有在 "touchmove" 触发了演示文稿事件时才会阻止默认行为 embedded: false, // 是否在按下 ? 键时显示快捷键帮助面板 help: true, // 演讲备注是否对所有人可见 showNotes: false, // 两个幻灯片之间自动播放的时间间隔（毫秒），当设置为 0 时，则禁止自动播放。 // 该值可以被幻灯片上的 `data-autoslide` 属性覆盖 autoSlide: 0, // 允许停止自动播放 // 在手动切换分段或幻灯片后暂停自动播放 // 按 a 键暂停或恢复自动播放 autoSlideStoppable: true, // 使用该函数执行自动播放操作 autoSlideMethod: Reveal.navigateNext, // 启用鼠标滚轮切换幻灯片，作用与 SPACE 相同 mouseWheel: false, // 在移动设备上隐藏地址栏 hideAddressBar: true, // 在 iframe 预览弹框中打开链接 previewLinks: false, // 切换过渡效果 // none-无/fade-渐变/slide-飞入/convex-凸面/concave-凹面/zoom-缩放 transition: 'slide', // none/fade/slide/convex/concave/zoom // 切换过渡速度 // default-中速/fast-快速/slow-慢速 transitionSpeed: 'default', // default/fast/slow // 背景切换过渡效果 backgroundTransition: 'fade', // none/fade/slide/convex/concave/zoom // 预加载幻灯片数 viewDistance: 3, // 视差背景图 parallaxBackgroundImage: '', // 示例："'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'" // 视察背景图尺寸 parallaxBackgroundSize: '', // CSS 写法，示例："2100px 900px"（目前只支持像素值，不支持 % 和 auto） // 相邻两张幻灯片间，视差背景移动的像素值 // - 如果不设置则自动计算 // - 当设置为 0 时，则禁止视差动画 parallaxBackgroundHorizontal: null, parallaxBackgroundVertical: null&#125;); 在执行初始化后，可通过 configure 方法来更新配置： 12345// 关闭自动播放Reveal.configure(&#123; autoSlide: 0 &#125;);// 开启自动播放（时间间隔为 5 秒）Reveal.configure(&#123; autoSlide: 5000 &#125;); 演示文稿尺寸演示文稿有一个标准尺寸，框架会在其基础上自动缩放以适应各种分辨率。 尺寸相关的配置项及其默认值如下：1234567891011121314151617Reveal.initialize(&#123; ... // 演示文稿缩放时，会保持标准尺寸的宽高比。 // 可使用百分比，如：'200%' width: 960, height: 700, // 内容外边距 margin: 0.1, // 内容缩放比例的最小值/最大值 minScale: 0.2, maxScale: 1.5&#125;); 如果想要使用自定义的缩放方式（如使用媒体查询），可通过下面的设置来禁用自动缩放：12345678910Reveal.initialize(&#123; ... width: "100%", height: "100%", margin: 0, minScale: 1, maxScale: 1&#125;); 依赖Reveal.js 的部分功能需要引入自带的第三方库，可在初始化时传入依赖项，运行时会自动加载。 12345678910111213141516171819202122Reveal.initialize(&#123; dependencies: [ // classList 跨浏览器支持 - https://github.com/eligrey/classList.js/ &#123; src: 'lib/js/classList.js', condition: function() &#123; return !document.body.classList; &#125; &#125;, // 解析 &lt;section&gt; 元素里的 Markdown 内容 &#123; src: 'plugin/markdown/marked.js', condition: function() &#123; return !!document.querySelector( '[data-markdown]' ); &#125; &#125;, &#123; src: 'plugin/markdown/markdown.js', condition: function() &#123; return !!document.querySelector( '[data-markdown]' ); &#125; &#125;, // &lt;code&gt; 元素语法高亮 &#123; src: 'plugin/highlight/highlight.js', async: true, callback: function() &#123; hljs.initHighlightingOnLoad(); &#125; &#125;, // Alt+click 缩放点击元素 &#123; src: 'plugin/zoom-js/zoom.js', async: true &#125;, // 演讲备注 &#123; src: 'plugin/notes/notes.js', async: true &#125;, // 数学公式 &#123; src: 'plugin/math/math.js', async: true &#125; ]&#125;); 自定义库也可以使用该方式加载。依赖项属性： src: 脚本路径 async: [可选] 异步，是否允许 reveal.js 执行后再加载脚本，默认值为 false callback: [可选] 回调函数，脚本加载完成后执行 condition: [可选] 条件函数，返回 true 时才会加载脚本 要使用该方式来加载依赖项，需在引入 reveal.js 之前引入 head.js (提供加载脚本功能的库)。 Ready事件reveal.js 在所有非异步依赖加载完成，准备播放时，会广播 ‘ready’ 事件。可调用 Reveal.isReady() 函数来检查 reveal.js 是否已准备完成。 123Reveal.addEventListener( 'ready', function( event ) &#123; // event.currentSlide, event.indexh, event.indexv&#125; ); reveal.js 准备完成时会给 .reveal 元素增加 .ready 类，也可以此来判断是否已准备完成。 自动播放演示文稿可以设置为自动播放，只需告诉框架自动切换的时间间隔（毫秒）： 1234// 每 5 秒自动切换下一张幻灯片Reveal.configure(&#123; autoSlide: 5000&#125;); 在手动切换分段或幻灯片后会暂停自动播放，也可以按 a 键来暂停或恢复自动播放。设置 false``` 后，用户操作则不会打断自动播放。123456789也可以通过 ```data-autoslide``` 属性来给个别幻灯片或分段重新设置时间间隔:```html&lt;section data-autoslide=&quot;2000&quot;&gt; &lt;p class=&quot;fragment&quot;&gt; 2 秒后第一个分段会自动显示 &lt;/p&gt; &lt;p class=&quot;fragment&quot; data-autoslide=&quot;10000&quot;&gt; 10 秒后下一个分段会自动显示 &lt;/p&gt; &lt;p class=&quot;fragment&quot;&gt; 2 秒后会自动切换到下一张幻灯片 &lt;/p&gt;&lt;/section&gt; 通过设置 指定自动播放的方式，如设置为 ```Reveal.navigateRight```，则自动播放时纵向幻灯片只会播放主幻灯片，其它纵向幻灯片会被忽略。123456789101112131415自动播放被暂停和恢复时，会广播 ```autoslidepaused``` 和 ```autoslideresumed``` 事件。## 自定义快捷键如果不喜欢默认的快捷键，可通过 ```keyboard``` 配置项来自定义：```javascriptReveal.configure(&#123; keyboard: &#123; 13: &apos;next&apos;, // 按 ENTER 键切换到下一个分段或幻灯片 27: function() &#123;&#125;, // 按 ESC 键时触发自定义行为 32: null // 按 SPACE 时不做任何处理（可用于禁用 reveal.js 的默认快捷键） &#125;&#125;); 触屏操作在触屏设备上可以通过滑动来操作幻灯片，水平滑动切换横向幻灯片，垂直滑动切换纵向幻灯片。设置 false`` 可禁用触屏操作。123456789101112131415161718192021如果幻灯片内容本身带有滑动操作（比如滚动内容），需要给元素添加 `data-prevent-swipe` 属性来阻止默认的滑动行为。## 延迟加载当演示文稿中带有大量的多媒体或 iframe 内容时，延迟加载就显得尤为重要，即只提前加载当前幻灯片最近的几张幻灯片中的内容。预加载的幻灯片数量由 `viewDistance` 配置项决定。延迟加载支持 image、video、audio 和 iframe 元素，只需把 &quot;src&quot; 属性改为 &quot;data-src&quot; 即可。幻灯片中延迟加载的 iframe，会在切换到其它幻灯片时自动卸载。```html&lt;section&gt; &lt;img data-src=&quot;图片.png&quot;&gt; &lt;iframe data-src=&quot;http://hakim.se&quot;&gt;&lt;/iframe&gt; &lt;video&gt; &lt;source data-src=&quot;视频.webm&quot; type=&quot;video/webm&quot; /&gt; &lt;source data-src=&quot;视频.mp4&quot; type=&quot;video/mp4&quot; /&gt; &lt;/video&gt;&lt;/section&gt; API中文Reveal 对象提供了一套控制演示进度和管理演示状态的 JavaScript API： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// 演示进度控制Reveal.slide( indexh, indexv, indexf );Reveal.left();Reveal.right();Reveal.up();Reveal.down();Reveal.prev();Reveal.next();Reveal.prevFragment();Reveal.nextFragment();// 打乱幻灯片顺序Reveal.shuffle();// 显示快捷键帮助面板Reveal.showHelp();// 管理演示文稿状态，传入 true/false 对应 on/off 状态Reveal.toggleOverview();Reveal.togglePause();Reveal.toggleAutoSlide();// 改变配置项设置Reveal.configure(&#123; controls: true &#125;);// 获取当前的配置项设置Reveal.getConfig();// 获取当前演示文稿的缩放比例Reveal.getScale();// 获取上一个/当前幻灯片节点Reveal.getPreviousSlide();Reveal.getCurrentSlide();// 获取当前演示状态// h-横向幻灯片索引，v-纵向幻灯片索引，f-分段索引Reveal.getIndices(); // &#123; h: 0, v: 0, f: 0 &#125;// 获取当前演示进度Reveal.getProgress(); // 0-1// 获取幻灯片总数（包括横向幻灯片和纵向幻灯片）Reveal.getTotalSlides();// 获取当前幻灯片的演讲备注Reveal.getSlideNotes();// 状态检查Reveal.isFirstSlide();Reveal.isLastSlide();Reveal.isOverview();Reveal.isPaused();Reveal.isAutoSliding(); 幻灯片切换事件幻灯片切换时会广播 ‘slidechanged’ 事件。event 对象保存了当前幻灯片的横向索引和纵向索引、上一张幻灯片和当前幻灯片的节点引用。 部分第三方库，如 MathJax（见 #226），会受到幻灯片变形和显示状态的影响，此时可以尝试在该事件的回调函数中重新计算和渲染来进行修复。 123Reveal.addEventListener( 'slidechanged', function( event ) &#123; // event.previousSlide, event.currentSlide, event.indexh, event.indexv&#125; ); 演示状态getState 方法可以获取演示文稿的当前状态，使用这个快照，可以非常方便地返回到记录的演示进度。 1234567891011// 切换到幻灯片 1Reveal.slide( 1 );// 获取当前状态var state = Reveal.getState();// 切换到幻灯片 3Reveal.slide( 3 );// 切回幻灯片 1Reveal.setState( state ); 幻灯片状态如果给幻灯片 &lt;section&gt; 设置了 data-state=&quot;somestate&quot; 属性，则当播放到该幻灯片时，”somestate” 将会出现在文档元素 &lt;html&gt; 的类里，可以很方便地给各个幻灯片设置不同的页面样式。 此外，还可以在 JavaScript 中侦听这个状态： 123Reveal.addEventListener( 'somestate', function() &#123; // TODO: somestate 出现了，做些啥吧&#125;, false ); 幻灯片背景元素的 ```data-background``` 属性可以设置一个覆盖整个幻灯片的背景。12345678支持 4 种类型的背景：颜色，图像，视频和 iframe。#### 颜色背景支持所有 CSS 颜色格式，如 rgba() 或 hsl()。```html&lt;section data-background-color=&quot;#ff0000&quot;&gt; &lt;h2&gt; 颜色背景 &lt;/h2&gt;&lt;/section&gt; 图像背景背景图像默认会自动调整大小以覆盖整个幻灯片，可设置的选项： 属性 默认值 说明 data-background-image 图片 URL（GIF 动图会在幻灯片显示时重新播放） data-background-size cover 见 MDN background-size data-background-position center 见 MDN background-position data-background-repeat no-repeat 见 MDN background-repeat 123456&lt;section data-background-image="http://example.com/image.png"&gt; &lt;h2&gt; 图像背景 &lt;/h2&gt;&lt;/section&gt;&lt;section data-background-image="http://example.com/image.png" data-background-size="100px" data-background-repeat="repeat"&gt; &lt;h2&gt; 背景图像尺寸为 100 像素，且平铺模式为重复 &lt;/h2&gt;&lt;/section&gt; 视频背景在幻灯片后面自动播放一个撑满页面的视频。 属性 默认值 说明 data-background-video 单个视频地址，或由半角逗号 ‘,’ 分隔的视频地址列表。 data-background-video-loop false 是否循环播放 data-background-video-muted false 是否静音 123&lt;section data-background-video="https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm" data-background-video-loop data-background-video-muted&gt; &lt;h2&gt; 视频背景 &lt;/h2&gt;&lt;/section&gt; Iframe 背景嵌入一个网页作为背景，该网页位于幻灯片后面的背景层，无法进行交互。123&lt;section data-background-iframe="https://slides.com"&gt; &lt;h2&gt; Iframe &lt;/h2&gt;&lt;/section&gt; 背景切换过渡效果背景切换的默认过渡效果为 fade（渐变），可在初始化 时传入 ```backgroundTransition``` 配置项来修改，也可给 `` 添加 ```data-background-transition``` 属性来给个别幻灯片单独设置。123456789101112131415161718192021#### 视差背景要使用视差滚动背景，需要在初始化 reveal.js 时设置下面的前两个配置项（后两个为可选项）。```javascriptReveal.initialize(&#123; // 视差背景图 parallaxBackgroundImage: &apos;&apos;, // 示例：&quot;&apos;https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg&apos;&quot; // 视察背景图尺寸 parallaxBackgroundSize: &apos;&apos;, // CSS 写法，示例：&quot;2100px 900px&quot;（目前只支持像素值，不支持 % 和 auto） // 相邻两张幻灯片间，视差背景移动的像素值 // - 如果不设置则自动计算 // - 当设置为 0 时，则禁止视差动画 parallaxBackgroundHorizontal: 200, parallaxBackgroundVertical: 50&#125;); 视差背景图尺寸必须大于幻灯片尺寸，否则切换幻灯片时无法滚动。查看示例 切换过渡效果幻灯片的切换过渡效果，默认使用配置项 设置的值，可通过 ```data-transition``` 属性来给个别幻灯片单独指定过渡效果：123456789```html&lt;section data-transition=&quot;zoom&quot;&gt; &lt;h2&gt; 该幻灯片不使用全局的切换过渡效果，而是单独指定的缩放！ &lt;/h2&gt;&lt;/section&gt;&lt;section data-transition-speed=&quot;fast&quot;&gt; &lt;h2&gt; 可供选择的切换过渡速度有：default-中速、fast-快速、slow-慢速！ &lt;/h2&gt;&lt;/section&gt; 甚至可以给同一张幻灯片指定不同的切入和切出过渡效果： 123456789101112131415&lt;section data-transition="slide"&gt; 没时间解释了快上车……&lt;/section&gt;&lt;section data-transition="slide"&gt; 继续前进……&lt;/section&gt;&lt;section data-transition="slide-in fade-out"&gt; 到站停车。&lt;/section&gt;&lt;section data-transition="fade-in slide-out"&gt; （乘客上车和下车）&lt;/section&gt;&lt;section data-transition="slide"&gt; 重新上路。&lt;/section&gt; 内部跳转幻灯片间的跳转十分简单，下面第一个例子指定的是目标幻灯片的索引，第二个例子指定的是目标幻灯片的 ID 属性（id1234```html&lt;a href=&quot;#/2/1&quot;&gt; 跳转到第 3 个横向幻灯片的第 2 个纵向幻灯片 &lt;/a&gt;&lt;a href=&quot;#/some-slide&quot;&gt; 跳转到 ID 为 some-slide 的幻灯片 &lt;/a&gt; 也可以给元素添加下面这些类，来指定一个相对地址，类似于 reveal.js 的控制面板。如果指定的是一个有效的跳转地址，元素会自动附加 类。12345678```html&lt;a href=&quot;#&quot; class=&quot;navigate-left&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;navigate-right&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;navigate-up&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;navigate-down&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;navigate-prev&quot;&gt; &lt;!-- 上一张纵向幻灯片或横向幻灯片 --&gt;&lt;a href=&quot;#&quot; class=&quot;navigate-next&quot;&gt; &lt;!-- 下一张纵向幻灯片或横向幻灯片 --&gt; 片段分段可用于强调幻灯片中的个别元素。演示文稿向前播放时，所有带有 类的元素，会在切换下个幻灯片之前逐个触发。[查看示例](http://lab.hakim.se/reveal-js/#/fragments)123456789101112131415分段默认是初始隐藏，播放时渐显出现，可通过给分段追加类来修改这个效果：```html&lt;section&gt; &lt;p class=&quot;fragment grow&quot;&gt; 放大：初始可见，播放时放大 &lt;/p&gt; &lt;p class=&quot;fragment shrink&quot;&gt; 缩小：初始可见，播放时缩小 &lt;/p&gt; &lt;p class=&quot;fragment fade-out&quot;&gt; 渐隐消失：初始可见，播放时渐隐消失 &lt;/p&gt; &lt;p class=&quot;fragment fade-up&quot;&gt; 渐显上升：初始隐藏，播放时渐显上升出现（down、left、right 类似） &lt;/p&gt; &lt;p class=&quot;fragment current-visible&quot;&gt; 显示一次：初始隐藏，播放时出现，继续播放则消失 &lt;/p&gt; &lt;p class=&quot;fragment highlight-current-blue&quot;&gt; 高亮蓝一次：初始可见，播放时变蓝，继续播放则恢复颜色 &lt;/p&gt; &lt;p class=&quot;fragment highlight-red&quot;&gt; 高亮红：初始可见，播放时变红 &lt;/p&gt; &lt;p class=&quot;fragment highlight-green&quot;&gt; 高亮绿：初始可见，播放时变绿 &lt;/p&gt; &lt;p class=&quot;fragment highlight-blue&quot;&gt; 高亮蓝：初始可见，播放时变蓝 &lt;/p&gt;&lt;/section&gt; 嵌套分段会对包裹的内容逐个触发，在下面的例子中，播放时文本会先渐显出现，继续播放则文本渐隐消失。 12345&lt;section&gt; &lt;span class="fragment fade-in"&gt; &lt;span class="fragment fade-out"&gt; 我将渐显出现，然后渐隐消失 &lt;/span&gt; &lt;/span&gt;&lt;/section&gt; 分段的播放顺序，可以通过 属性来控制。1234567```html&lt;section&gt; &lt;p class=&quot;fragment&quot; data-fragment-index=&quot;3&quot;&gt; 最后播放 &lt;/p&gt; &lt;p class=&quot;fragment&quot; data-fragment-index=&quot;1&quot;&gt; 最先播放 &lt;/p&gt; &lt;p class=&quot;fragment&quot; data-fragment-index=&quot;2&quot;&gt; 第二个播放 &lt;/p&gt;&lt;/section&gt; 片段事件任意分段在出现和隐藏时，reveal.js 都会广播事件。 部分第三方库，如 MathJax（见 #505），会受到初始隐藏的分段元素的影响，此时可以尝试在这些事件的回调函数中重新计算和渲染来进行修复。 123456Reveal.addEventListener( 'fragmentshown', function( event ) &#123; // event.fragment = 分段元素节点&#125; );Reveal.addEventListener( 'fragmenthidden', function( event ) &#123; // event.fragment = 分段元素节点&#125; ); 代码语法高亮Reveal 自带代码语法高亮插件 highlight.js（需引入该依赖项）。在下面的例子中， clojure 代码会自动语法高亮，指定 data-trim 属性可以自动删除多余空格。HTML 默认会自动转义，要避免转义（如例子中的 &lt;mark&gt; 标签要显示出来），可以给 &lt;code&gt; 元素追加 data-noescape 属性。 123456789&lt;section&gt; &lt;pre&gt;&lt;code data-trim data-noescape&gt;(def lazy-fib (concat [0 1] &lt;mark&gt;((fn rfib [a b]&lt;/mark&gt; (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1))) &lt;/code&gt;&lt;/pre&gt;&lt;/section&gt; 幻灯片页码如果想显示幻灯片页码，可以设置 配置项。1234567891011```javascript// 使用默认格式显示幻灯片页码Reveal.configure(&#123; slideNumber: true &#125;);// 可供选择的幻灯片页码格式：// &quot;h.v&quot;: 当前横向幻灯片页码 . 当前纵向幻灯片页码 (默认)// &quot;h/v&quot;: 当前横向幻灯片页码 / 当前纵向幻灯片页码// &quot;c&quot;: 当前幻灯片页码（包括横向幻灯片和纵向幻灯片）// &quot;c/t&quot;: 当前幻灯片页码 / 幻灯片总数Reveal.configure(&#123; slideNumber: &apos;c/t&apos; &#125;); 概览模式按 “Esc” 或 “o” 键可以打开或关闭概览模式。在概览模式中，你仍然可以在幻灯片间切换，就好像位于演示文稿的上空，操作平铺开来的幻灯片。与概览模式相关的 API： 12345Reveal.addEventListener( 'overviewshown', function( event ) &#123; /* ... */ &#125; );Reveal.addEventListener( 'overviewhidden', function( event ) &#123; /* ... */ &#125; );// 通过代码打开或关闭概览模式Reveal.toggleOverview(); 全屏模式按 »F« 键可以让演示文稿进入全屏模式，按 »ESC« 键退出全屏模式。 嵌入媒体嵌入的 HTML5 &lt;video&gt;/&lt;audio&gt; 和 YouTube iframe，会在幻灯片切出时自动暂停播放，通过给元素添加 data-ignore 属性可以禁止该行为。 给媒体元素添加 data-autoplay 属性，则在幻灯片显示时媒体将自动播放： 1&lt;video data-autoplay src="http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4"&gt;&lt;/video&gt; 此外，框架会自动发送两条消息（见 发送消息）给所有的 iframe。包含 iframe 的幻灯片，显示时会给其内部所有的 iframe 发送 ```slide:stop``` 消息。1234567891011### 拉伸元素有时我们希望元素（如图像或者视频）可以自动拉伸，尽可能多的占用幻灯片的空间，这时可以给元素添加 ```.stretch``` 类：```html&lt;section&gt; &lt;h2&gt; 这个视频将占用幻灯片的所有剩余空间 &lt;/h2&gt; &lt;video class=&quot;stretch&quot; src=&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;&gt;&lt;/video&gt;&lt;/section&gt; 限制： 只能用于幻灯片的直接子元素 每个幻灯片最多只能设置 1 个子元素 通信 API框架自带一个发送消息 API 1234下面的例子展示了如何让指定窗口中的 reveal.js 实例切换到幻灯片 2：```javascript&lt;window&gt;.postMessage( JSON.stringify(&#123; method: &apos;slide&apos;, args: [ 2 ] &#125;), &apos;*&apos; ); 译者注示例可参考 icewind1991 的 plugin/postmessage。reveal.js 已自带该特性，无需额外引入 postmessage.js 插件。123456789101112131415161718192021222324252627&lt;html&gt; &lt;body&gt; &lt;iframe id="reveal" src="../../index.html" style="border: 0;" width="500" height="500"&gt;&lt;/iframe&gt; &lt;div&gt; &lt;input id="back" type="button" value="后退"/&gt; &lt;input id="ahead" type="button" value="前进"/&gt; &lt;input id="slideto" type="button" value="切换到 2-2"/&gt; &lt;/div&gt; &lt;script&gt; (function ()&#123; var back = document.getElementById( 'back' ), ahead = document.getElementById( 'ahead' ), slideto = document.getElementById( 'slideto' ), reveal = window.frames[0]; back.addEventListener( 'click', function () &#123; reveal.postMessage( JSON.stringify(&#123;method: 'prev', args: []&#125;), '*' ); &#125;, false ); ahead.addEventListener( 'click', function ()&#123; reveal.postMessage( JSON.stringify(&#123;method: 'next', args: []&#125;), '*' ); &#125;, false ); slideto.addEventListener( 'click', function ()&#123; reveal.postMessage( JSON.stringify(&#123;method: 'slide', args: [2,2]&#125;), '*' ); &#125;, false ); &#125;()); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; reveal.js 在 iframe 中运行时，可选择是否将其所有事件冒泡给父窗口。冒泡的事件对象为一个 JSON 字符串，保存了 3 个字段：namespace-命名空间、eventName-事件名、state-状态。下面的例子展示了父窗口如何向 reveal 订阅事件： 123456window.addEventListener( 'message', function( event ) &#123; var data = JSON.parse( event.data ); if( data.namespace === 'reveal' &amp;&amp; data.eventName ==='slidechanged' ) &#123; // 幻灯片切换，可访问 data.state 来查看幻灯片页码 &#125;&#125; ); 跨窗口消息传递可通过配置项来打开或关闭。 123456789Reveal.initialize(&#123; ..., // 暴露 postMessage API postMessage: true, // 将演示文稿的所有事件冒泡给父窗口 postMessageEvents: false&#125;); 导出 PDF演示文稿可以通过一个特殊的打印样式来导出 PDF。该特性需要使用 Google Chrome 或 Chromium、且运行于 web 服务器上时，可以导出为 PDF。这是一个演示文稿导出 PDF 并上传到 SlideShare 的例子：http://www.slideshare.net/hakimel/revealjs-300。 页面尺寸导出的 PDF 尺寸由 演示文稿尺寸 决定，如果幻灯片太高无法一页展示完，则会切分为多页，可通过 pdfMaxPagesPerSlide 配置项设置每张幻灯片最多可被切分为几数，如 Reveal.configure({ pdfMaxPagesPerSlide: 1 }) 可确保幻灯片不会被切分。 打印样式想要启用演示文稿的打印功能，需要加载一个用于打印的特殊样式 /css/print/pdf.css，默认的 index.html 文件已包含该逻辑，只要演示文稿的链接中带有 print-pdf 参数，就会自动加载。如果使用的是其它的 HTML 模板，可以在 HEAD 中插入以下代码： 1234567&lt;script&gt; var link = document.createElement( 'link' ); link.rel = 'stylesheet'; link.type = 'text/css'; link.href = window.location.search.match( /print-pdf/gi ) ? 'css/print/pdf.css' : 'css/print/paper.css'; document.getElementsByTagName( 'head' )[0].appendChild( link );&lt;/script&gt; 步骤 给演示文稿的 URL 加上 print-pdf 参数，如：http://localhost:8000/?print-pdf#/ ，可以尝试这个例子 lab.hakim.se/reveal-js?print-pdf。 打开浏览器的打印面板 (CTRL/CMD+P)。 Destination（目标打印机） 修改为 Save as PDF（另存为 PDF）。 Layout（布局） 修改为 Landscape（横向）。 Margins（边距） 修改为 None（无）。 启用选项 Background graphics（背景图形）。 点击 Save（保存） 也可使用 decktape（一个将 HTML5 演示文稿导出为高质量 PDF 的框架）项目代替。 主题框架带有几个不同的主题： black：黑色背景，白色文本，蓝色链接（默认主题） white：白色背景，黑色文本，蓝色链接 league：灰色背景，白色文本，蓝色链接（reveal.js 3.0.0 之前版本的默认主题） beige：米黄色背景，暗色（#333）文本，棕色链接 sky：蓝色背景，暗色文本，蓝色链接 night：黑色背景，亮色（#eee）文本，橙色链接 serif：咖啡色背景，灰色文本，褐色链接 simple：白色背景，黑色文本，蓝色链接 solarized：奶油色背景，深绿色文本，蓝色链接 每个主题都是一个单独的样式文件，修改主题只需把 index.html 的主题样式中的 black 替换为想要的主题名即可： 1&lt;link rel="stylesheet" href="css/theme/black.css" id="theme"&gt; 如果要增加自定义主题，请参考：/css/theme/README.md。 演讲备注reveal.js 自带演讲备注插件，可以在一个单独的浏览器窗口中为每张幻灯片提供备注，同时预览下一张幻灯片。按 ‘s’ 键来打开备注窗口。 演讲计时器会在备注窗口打开时启动，点击时间可以重置为 00:00:00。 给幻灯片追加一个 元素来添加备注，如果想用 Markdown 编写备注内容，可以给 aside 元素添加 ```data-markdown``` 属性。12345678910111213也可以通过幻灯片的 `data-notes` 属性来添加简单的备注，如 `&lt;section data-notes=&quot;一些简单的备注&quot;&gt;&lt;/section&gt;`。如果是在本地打开演示文稿，想要使用演讲备注，需要 reveal.js [运行于一个本地 web 服务器](#完整安装).```html&lt;section&gt; &lt;h2&gt; 我是幻灯片 &lt;/h2&gt; &lt;aside class=&quot;notes&quot;&gt; 大家好，我是这张幻灯片的备注，在演示文稿上是看不到，不过可以按 &apos;s&apos; 键打开备注窗口来找我哦，么么哒~ &lt;/aside&gt;&lt;/section&gt; 对于幻灯片引入的外部 Markdown 文件，可以在指定的分隔符后面添加备注： 123456789&lt;section data-markdown="example.md" data-separator="^\n\n\n" data-separator-vertical="^\n\n" data-separator-notes="^Note:"&gt;&lt;/section&gt;# 标题## 子标题幻灯片内容……Note:只会在备注窗口显示的内容…… 分享和打印演讲备注备注只对演讲者可见，如果想让其他人也能看到，可以在初始化 reveal.js 时，把 showNotes 配置项设为 true，则备注会显示在演示文稿的底部。 如果启用了 showNotes，在 导出 PDF 时也会包含备注。备注默认打印在一个半透明的浮窗中，覆盖于幻灯片底部，如果想在该幻灯片后面单独新建一页打印备注，可以把 showNotes 设置为 &quot;separate-page&quot;。 服务器端演讲备注基于 Node.js 的演讲备注插件，让你可以在其它设备上运行你正在控制的演讲备注，就像客户端演讲备注的副本，会相互同步操作。需要引入以下依赖项： 12345678Reveal.initialize(&#123; ... dependencies: [ &#123; src: 'socket.io/socket.io.js', async: true &#125;, &#123; src: 'plugin/notes-server/client.js', async: true &#125; ]&#125;); 然后： 安装 Node.js（4.0.0 或更新版本） 执行 install```13. 执行 ```node plugin/notes-server 多路复用多路复用插件让你的听众可以在自己的手机、平板电脑或笔记本电脑上观看你正在控制的演示文稿，当你操作主演示文稿时，所有的客户端演示文稿将实时同步更新。查看示例：https://reveal-js-multiplex-ccjbegmaii.now.sh/。 多路复用插件需要以下 3 个部分： 可以控制的主演示文稿 同步更新的客户端演示文稿 用于广播主演示文稿事件给客户端演示文稿的 Socket.io 服务器 更多说明： 主演示文稿存放于只有演讲者可以访问（最好）的静态文件服务器（存放在演讲者的电脑上即可，在演讲者的电脑上运行主演示文稿会更加保险，即使会场断网，也不会打断演示。）。在主演示文稿目录中执行以下命令： install node-static```12. ```static 如果想在主演示文稿上使用演讲备注，需要先配置演讲备注插件，然后在主演示文稿目录中执行 plugin/notes-server``` 命令。12345678910111213141516171819202122232425262728运行演讲备注/静态文件服务器，作为主控端连接 socket.io 服务器。通过 ```http://localhost:1947``` 访问主演示文稿。配置示例：```javascriptReveal.initialize(&#123; // 其它配置项…… multiplex: &#123; // 示例值，使用时请自己生成，具体参考 socket.io 说明。 secret: &apos;13652805320794272084&apos;, // 从 socket.io 服务器获得，允许演示文稿可以被控制 id: &apos;1ea875674b17ca76&apos;, // 从 socket.io 服务器获得 url: &apos;https://reveal-js-multiplex-ccjbegmaii.now.sh&apos; // socket.io 服务器地址 &#125;, // 依赖项 dependencies: [ &#123; src: &apos;//cdn.socket.io/socket.io-1.3.5.js&apos;, async: true &#125;, &#123; src: &apos;plugin/multiplex/master.js&apos;, async: true &#125;, // 演讲备注 &#123; src: &apos;plugin/notes-server/client.js&apos;, async: true &#125; // 其它依赖项…… ]&#125;); 客户端演示文稿存放于可以公开访问的静态文件服务器，如 GitHub Pages、Amazon S3、Dreamhost、Akamai 等。 使用下面的配置，当听众通过 访问演示文稿时，将作为被控端连接 socket.io 服务器。123456789101112131415161718192021配置示例：```javascriptReveal.initialize(&#123; // 其它配置项…… multiplex: &#123; // 示例值，使用时请自己生成，具体参考 socket.io 说明。 secret: null, // 设置为 null，演示文稿将不能被控制，而是同步 socket.io 服务器上相同 id 的主演示文稿的操作 id: &apos;1ea875674b17ca76&apos;, // 从 socket.io 服务器获得 url: &apos;https://reveal-js-multiplex-ccjbegmaii.now.sh&apos; // socket.io 服务器地址 &#125;, // 依赖项 dependencies: [ &#123; src: &apos;//cdn.socket.io/socket.io-1.3.5.js&apos;, async: true &#125;, &#123; src: &apos;plugin/multiplex/client.js&apos;, async: true &#125; // 其它依赖项…… ]&#125;); _MathJax如果想在演示文稿中更好的显示数学公式，可以使用基于 MathJax 库封装的这个小插件。 插件默认使用 LaTeX 格式（一种基于ΤΕΧ的排版系统），可通过 配置项来修改。12345678910111213141516171819MathJax 是从远程服务器加载的，如果想离线使用，需自行下载该库，并修改 ```mathjax``` 配置项。下面是 MathJax 的配置示例（使用默认配置时，```math``` 配置项可省略）：```jsReveal.initialize(&#123; // 其它配置项…… math: &#123; mathjax: &apos;https://cdn.mathjax.org/mathjax/latest/MathJax.js&apos;, config: &apos;TeX-AMS_HTML-full&apos; // 参考 http://docs.mathjax.org/en/latest/config-files.html &#125;, dependencies: [ &#123; src: &apos;plugin/math/math.js&apos;, async: true &#125; ]&#125;); 如果想了解 MathJax 的 HTTPS 传输方式，或为了稳定性需要使用特定版本，请参考 MathJax 的说明文档。 工程安装基础安装 适用于创建简单的演讲文稿，完整安装 可以使用 reveal.js 的所有特性和插件（如演讲备注）。 基础安装reveal.js 基础功能的安装十分简单，只需下载框架包，然后直接在浏览器中打开 index.html 文件即可。 在 https://github.com/hakimel/reveal.js/releases 上下载 reveal.js 的最新版本 解压缩，然后将 index.html 里的示例内容修改为自己的内容 在浏览器中打开 index.html 完整安装部分 reveal.js 特性（如 Markdown 和演讲备注）需要演示文稿运行于一个本地 web 服务器。按照下面的步骤，可以创建一个完整的 reveal.js 开发和运行环境： 安装 Node.js （4.0.0 或更新版本） 克隆 reveal.js 仓库 1$ git clone https://github.com/palmerye/demos-Reveal.js.git 进入 reveal.js 目录 1$ cd reveal.js 安装依赖 1$ npm install 启动演示文稿并监控文件变更 1$ npm start 打开 http://localhost:8000 查看演示文稿 通过 npm start -- --port=8001 指令可修改端口号 目录结构 css/ 框架样式 js/ 框架 JavaScript plugin/ 用于扩展 reveal.js 的组件 lib/ 第三方库（JavaScript、样式、字体） 许可遵循 MIT 开源协议 Copyright (C) 2016 Hakim El Hattab, http://hakim.se]]></content>
      <tags>
        <tag>reveal.js</tag>
        <tag>slides</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在Windows下像Mac一样优雅开发]]></title>
    <url>%2F2017%2F04%2F%E5%A6%82%E4%BD%95%E5%9C%A8Windows%E4%B8%8B%E5%83%8FMac%E4%B8%80%E6%A0%B7%E4%BC%98%E9%9B%85%E5%BC%80%E5%8F%91%2F</url>
    <content type="text"><![CDATA[起因：之前一直用Mac开发，换了家公司，只许用Windows下开发，说实话，一开始我是拒绝的，可自从看到了这几个工具以后…… 下文大标题说明：（Mac下的工具）VS（Windows下的工具），Mac下的工具说明会简要点，毕竟看文章的基本上都是实在受不了Windows的重度Mac开发者。 1. item2 VS Cmder 终端工具 - iterm2iterm2是Mac下最好用的终端工具，听说没有之一。配合oh-my-zsh,你的终端居然可以这样！震惊！！（UC震惊部） 池建强大大有一篇文章《终极 Shell》讲mac下的终端，讲的比较好，贴这。大家可以做取舍。 - Cmder 如果你用过Windows自带的cmd，简直想shi有没有！页面丑就算了！没有tab！窗口不能缩放！不能用鼠标复制文本！！@#￥%&amp;*￥%…%￥ Cmder绝对是一款Windows环境下的cmd替代者，支持了大部分的Linux命令。 支持tab标签 集成git 支持绝大Unix/Linux命令 但是安装之后一般都会有以下几个问题： 中文乱码问题 文字重叠问题 λ其实可以替换成$ 2. Homebrew VS Chocolatey 包管理工具 - Homebrew为什么要用Homebrew？官网讲得很露骨，一款macOS缺失的软件包管理器 安装Homebrew：命令行输入1/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; 举个栗子，如果你要安装sublimeText，你可以这样：1brew install sublime-text 再优雅点，你可以安装Homebrew的命令行工具homebrew-cask12345brew tap phinze/homebrew-cask &amp;&amp; brew install brew-cask然后你可以这样愉快地安装一堆软件brew cask install sublime-text skitch dropbox google-chrome 用Homebrew安装软件有什么好处么？ 将软件包安装到独立目录，并将其文件软链接至 /usr/local 不会将文件安装到它本身目录之外，所以您可将 Homebrew 安装到任意位置 完全基于git和ruby，所以自由修改的同时你仍可以轻松撤销你的变更或与上游更新合并 - ChocolateyChocolatey官网是这么介绍自己的，The package manager for Windows. 安装嘿嘿，这个时候打开上面提到的cmder命令行工具，输入: 1@powershell -NoProfile -ExecutionPolicy Bypass -Command &quot;iex ((New-Object System.Net.WebClient).DownloadString(&apos;https://chocolatey.org/install.ps1&apos;))&quot; &amp;&amp; SET &quot;PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin&quot; 这个时候如果你也要装sublimeText3，你也可以这样！1choco install SublimeText3 是不是很酷！好处同上，具体的配置自行琢磨，这个时候已经和Mac下的体验很接近了。让我们再近一步！~ 3. Spotlight VS Listary 文件浏览增强工具 - Spotlight自从升级到macOS Sierra后，其实mac自带的Spotlight已经很强大了，至于类似Alfred的神器，我倒觉得一般用户没必要折腾了，当然你想更Geek点，可以折腾下Alfred，毕竟那样看起来很酷！ 安利VueJs时刻！ - Listary Listary的出现，让突然从Mac转向Windows开发的我产生的强烈排斥心理得到了一定的缓解！ 先说说效果经过我的配置，我想要打开某一软件或者文件，双击Ctrl，弹出Listary小窗，输入几个模糊关键字，回车！仿佛置身于Mac有没有！！ 下载安装官网有free版和Pro版，至于破解还是支持正版… 界面举栗 如果你是Mac用户，我想是无缝衔接的，配置快捷键后，效率也是极高的！ 4. Clover 给Windows资源管理器加上Tab标签 不知道Windows用户有没有注意到，每次打开我的电脑，会弹出一个新的窗口，再打开，再弹！再打开！再弹！循环个几次，桌面上会有一堆“我的电脑”窗口，是的，一堆……一堆……堆…… 所以你需要一个类似chrome标签一样的工具，帮你窗口整合。这就是[Clover]唯一的作用。 Clover下载地址 同样的，你可以将常用的地址存为标签，类似浏览器收藏夹，方便下次打开。 继续寻觅中……对我来说，应该是对于绝大部分开发者来说，开发环境的舒适是很重要的，想方设法提高效率，我倒觉得折腾这些工具也是挺有必要的。 应该会持续更新吧，毕竟Windows下坑还很多。]]></content>
      <tags>
        <tag>iterm2</tag>
        <tag>oh-my-zsh</tag>
        <tag>Cmder</tag>
        <tag>Homebrew</tag>
        <tag>Chocolatey</tag>
        <tag>spotlight</tag>
        <tag>Listary</tag>
        <tag>Clover</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git工作流之一(集中式工作流)]]></title>
    <url>%2F2017%2F02%2FGit%E5%B7%A5%E4%BD%9C%E6%B5%81%E4%B9%8B%E4%B8%80--%E9%9B%86%E4%B8%AD%E5%BC%8F%E5%B7%A5%E4%BD%9C%E6%B5%81%2F</url>
    <content type="text"><![CDATA[引言一言不合讲个小故事 一个和尚有水喝，两个和尚挑水喝，三个和尚没水喝。 故事暴露了团队协作的问题，但接下来的故事与和尚无关，只是讲讲团队协作的事儿。 贯穿全文的角色 老A：技术Leader 阿B：工程师 小C：实习生 Git工作流 Git是Linux老爹的强大发明之一，用C语言编写。强大的工具也因使用情景、使用对象的不同，衍生出不同的Git工作流。 情景一：集中式工作流 情景二：功能分支工作流 情景三：Gitflow工作流 情景四：Forking工作流 情景一：集中式工作流1. 老A初始化工程 老A在服务器上新建了一个repository（下文均以本人的github/git-workflow-story为例子） 12345mkdir git-workflow-story &amp;&amp; cd &quot;$_&quot;// 当然你也可以在bash里自定义 mkdir&amp;cd 等快捷命令git initgit remote add origin https://github.com/palmerye/git-workflow-story.git 2. 阿B开始写故事 阿B的任务是在repo里写Readme(Markdown) 12345mkdir story-B &amp;&amp; cd &quot;$_&quot;git clone https://github.com/palmerye/git-workflow-story.gitvi readme.md 于是阿B在readme里面写了一点东西，打算push到老A建的repo里。123456git add readme.mdgit commit -m &quot;这是阿B的第一次提交&quot;git push -u origin master// -u 参数用来初次push的时候指定默认upstream上游分支 3. 小C来啦 有一天，老A觉得阿B一个人忙不过来，找来小C来帮忙 上班第一天，小C就开始忙活，也打算在老A的repo里写点东西。 123mkdir story-C &amp;&amp; cd &quot;$_&quot;git clone https://github.com/palmerye/git-workflow-story.git 这个时候repo里已经有了阿B的第一次push的文件，小C突然发现有个错别字，就顺便改了。 12345git add readme.mdgit commit -m &quot;修改了一个错别字&quot;git push -u origin master 4. 冲突阿B下午又写了点东西，和之前一样，暂存/提交/推送，突然git push失败了（错误提示本地仓库落后于远端）。于是机智的阿B有了如下操作： 1git pull --rebase origin master 再次push的时候发现有冲突，于是去解决冲突。发现和小C改了同一个地方，于是自己修改完继续push。 git merge的冲突判定机制如下：先寻找两个commit的公共祖先，比较同一个文件分别在ours和theirs下对于公共祖先的差异，然后合并这两组差异。如果双方同时修改了一处地方且修改内容不同，就判定为合并冲突，依次输出双方修改的内容。 12345git add . git rebase --continuegit push origin master 故事完结 从此他们在一起过上了幸福的Coder生活。 由上面的故事我们可以看到，集中式工作流只有一条master分支，而且维护得干净一点，永远只有一条分支。多人协作的时候，推送前要确保自己本地状态和远端保持同步，因此要记得rebase。但局限就是，一条分支很难去管理多个开发状态，因此在集中式工作流的基础上，有了后文的功能分支工作流。 补充点东西 git pull 时，–rebase参数可以让分支更整洁 git pull前123 B1---B2 master /A---B---C origin/master 不加–rebase/相当于merge123 B1---B2 master / \A---B--------C origin/master 加上–rebase，告别合并点，让分支更整洁1A---B---C---B1---B2 master, origin/master]]></content>
      <tags>
        <tag>git</tag>
        <tag>workflow</tag>
        <tag>gitflow</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扫盲笔记--H5视频直播]]></title>
    <url>%2F2017%2F02%2F%E6%89%AB%E7%9B%B2%E7%AC%94%E8%AE%B0-H5%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%2F</url>
    <content type="text"><![CDATA[项目需要，这里做一个简单的笔记梳理 视频直播流程：采集端 ==&gt; 服务器端 ==&gt; 播放端 流程图用的一个Chrome插件，Gliffy Diagrams。 先把这些协议讲一讲1. RTMP（Real Time Messaging Protocol） RTMP是Adobe Systems公司为Flash播放器和服务器之间音频、视频和数据传输开发的开放协议。该协议基于TCP，是一个协议族，包括RTMP基本协议及RTMPT/RTMPS/RTMPE等多种变种。 工作原理：在RTMP协议中的基本数据单元称为Message（消息），在传输数据的过程中，Message会被拆分成更小快的Chunk（消息块）。 传输媒体流的过程：1.发送端将媒体数据封装成Message 2.再把Message切分成Chunk 3.基于TCP协议发送 4.接收端通过TCP收到Chunk 5.将Chunk重组成Message 6.对Message解包得到媒体数据 特点 延迟低 RTMP协议基于TCP底层通讯协议，属于长链接，收到数据后立即发送 延迟累积 还是因为基于TCP，丢包少（TCP重传机制）,网络差的时候服务器将包缓存，等到网络好的时候在一并发给服务器。 隐私性理想 2. HLS（HTTP Live Streaming） 关键词：切片。 HLS协议规定: 视频的封装格式是TS。 视频的编码格式为H264,音频编码格式为MP3、AAC或者AC-3。 定义了用来存放流配置和路径的m3u8索引文件。 先来show一段基于HLS协议的视频播放code 1234567...&lt;div id=&quot;player&quot;&gt; &lt;video width=&quot;640&quot; height=&quot;320&quot; controls&gt; &lt;source src=&quot;http://..url../live/livestream.m3u8&quot; type=&quot;application/x-mpegURL&quot;&gt; &lt;/video&gt;&lt;/div&gt;... 如果要兼容所有浏览器，需要接第三方播放器，比如video.js 工作原理：把整个流切分成一个个基于HTTP的小文件（ts文件），用m3u8索引表来管理这些小切片。可以看到上面👆这段code中的source，是一个.m3u8文件，所以当视频播放的时候，video标签解析这个索引文件（动态更新），然后按序去找到对应的ts文件（真正存放视频数据的文件）并连续播放。 特点： 跨平台（ios、Android、pc） RTMP基于flash，ios不支持 基于HTTP，容易接CDN 实时性差（延迟一般在10s-30s左右） 由于流被切片下载，假设.m3u8索引列表里有n个ts文件，每个ts文件包含m秒视频内容，同时推流端又有新的流推上来，但拉流端才刚刚看到下载下来的切片流，所以延迟就是n*m秒。想要延迟小，理想就让n和m的值最小到1，几乎零延迟，由于HLS基于HTTP协议，所以随之而来的就是请求次数增加，server端压力大。因此要平衡取舍。 PS：苹果官方推荐的ts时长为10s，列表3个ts文件，因此会有大概30s的延迟。https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StreamingMediaGuide/FrequentlyAskedQuestions/FrequentlyAskedQuestions.html 3.What duration should media files be? The main point to consider is that shorter segments result in more frequent refreshes of the index file, which might create unnecessary network overhead for the client. Longer segments will extend the inherent latency of the broadcast and initial startup time. A duration of 10 seconds of media per file seems to strike a reasonable balance for most broadcast content. 4.How many files should be listed in the index file during a continuous, ongoing session? The normal recommendation is 3, but the optimum number may be larger… 3. WebRTC（Web Real-Time Communication） 是一个支持网页浏览器进行实时语音对话或视频对话的 API。它于 2011 年 6 月 1 日开源并在 Google、Mozilla、Opera 支持下被纳入万维网联盟的 W3C 推荐标准。 浏览器兼容性 可以看到，截止目前（2017.2.14），WebRTC的兼容性还是惨不忍睹，只在PC端的Chrome比较好（毕竟是谷歌2010年以6820万美元收购Global IP Solutions公司而获得的一项技术）。不过风头火热，xxxx，指日可待。 工作原理简单的一句话就是，让浏览器提供JS的即时通信API。通过一系列的信令建立浏览器之间的信道，来传输音频视频数据。与WebSocket的区别就是，少了中间的WebSocket服务器。 其实没那么simple先来看看用WebRTC实现一场会议直播的正常流程 其实p2p（peer to peer）就能跑起来了 推流端（如Chrome浏览器）调用相关的媒体API来获取音视频源 中转的MCU服务器（不是说不需要么？因为chrome给超过10个用户推流的时候很容易崩），对音视频做一些简单的处理。 客户端（如Chrome）连接MCU，并获取媒体流。 之前在项目里用过声网的WebRTC的SDK，所以感觉这项技术还是牛honghong的。 4. HTTP-FLV （补充） 顾名思义，就是将音视频数据流封装成FLV，再通过HTTP协议传输给客户端。 特点 延时低（与RTMP媲美） 穿透性强（基于HTTP80端口通信） 可以使用HTTPS做加密通道 上面讲得差不多了，这里就做个小总结。 采集端(推流端)如开头的流程图中所述，一般常用的就是RTMP推流，因为延迟较小。 补充：几个主流的 web直播平台，几乎都是以HTTP-FLV为直播协议。 推荐一个推流工具：OBS Server端简单的说就是一台流媒体服务器，用来接收流和分发流。 e.g. 比如一台Nginx服务器，要扩展支持RTMP，用的较多是这个： https://github.com/arut/nginx-rtmp-module 播放端(拉流端) FlashPlayer浏览器支持（RTMP） h5的video标签（HLS） 火爆的flv.js（那个B站工资5000的大神，可惜走了）（HTTP-FLV） 实现了H5端对FLV格式的播放，终于解脱了臃肿的Flash。 说了这么多，大厂都有了视频直播的解决方案，直接拿来用也挺省心。 参考文章： http://www.cnblogs.com/luconsole/p/6079534.html https://www.nihaoshijie.com.cn/index.php/archives/615 这篇笔记做下来，真的是觉得视频这块领域很大呢，要想更深入还是需要花大力气学习的。肯定有很多不妥当的地方，希望多批评，文章也会持续更新…]]></content>
      <tags>
        <tag>RTMP</tag>
        <tag>HLS</tag>
        <tag>WebRTC</tag>
        <tag>HTTP-FLV</tag>
        <tag>flv.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web + Log = Blog]]></title>
    <url>%2F2017%2F01%2FWeb-Log-Blog%2F</url>
    <content type="text"><![CDATA[Blog原来是这样来的 博客（英语：Blog，为Web Log的混成词），意指log on the web意即在网络上纪录，是一种由个人管理、张贴新的文章、图片或视频的网站或在线日记，用来纪录、抒发情感或分享信息。 From Wiki. 我为什么要写博客For 生存 自从看了阮一峰老师的Blog，我才知道什么叫全能；频繁的浏览他的Blog，我才意识到全能的背后是文章的高产。 *知识梳理，才知道自己哪里缺胳膊少腿 给别人一个爱批评你的机会 一不小心能帮到同行呢 信息整合，也许有一天，不需要再这里Google那里Baidu了，Local Search就能找到信息 扩大在圈子里的影响力 （打这几个字我都有点手抖） For 生活 有没有发现，年级大了，QQ空间没什么动态更新了，朋友圈发得少了，不易悲，也不易喜。 写一些经历和想法，也许能和visitors产生一些共鸣 用文字和图片记录下一些生活，常常翻翻，听说这样不会抑郁 我挺喜欢拍照，拿blog当个web相册也不错 关于这个博客一些东西 暂时搭建在github良心的Pages上（Repository） 如果你手滑点进去了，那就手滑star下吧 搭建于gh-pages分支。为什么不用palmerye.github.io?另有他用，其实没多大区别 Blog工具用的Hexo，主题是Next，自己稍做了一点修改 首页的封面图是用AI画的矢量图，从PCB到Code，也表示自己从硬件转型到软件的历程，每一段经历都很宝贵，值得珍惜。 该加的功能都加了，包括站点底下的PV和UV统计 或许上面👆这条是假的，我们的工作就是不断否定自己 日子如何，力量也如何。这句话出于《圣经·申命记》33:25 关于博客的目的，说到底还是一句话，利人利己 因为我觉得这样很酷。]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
